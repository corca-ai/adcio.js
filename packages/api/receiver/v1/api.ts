/* tslint:disable */
/* eslint-disable */
/**
 * ADCIO API:receiver
 * The ADCIO API:receiver specification
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface NestJSErrorSchema
 */
export interface NestJSErrorSchema {
    /**
     * 
     * @type {number}
     * @memberof NestJSErrorSchema
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof NestJSErrorSchema
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof NestJSErrorSchema
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TrackAddToCartRequestDto
 */
export interface TrackAddToCartRequestDto {
    /**
     * ADCIO Client ID of the store.
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'storeId': string;
    /**
     * The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app.
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'sessionId': string;
    /**
     * The device identifier should be unique for each device. A customer can have multiple devices.
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'deviceId': string;
    /**
     * The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API.
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'customerId'?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'sdkVersion'?: string;
    /**
     * Identifier for the suggestion request
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'requestId'?: string;
    /**
     * Product ID (on store).
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'productIdOnStore'?: string;
    /**
     * Product ID / Banner ID
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'adsetId'?: string;
    /**
     * Category ID (on store).
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'categoryIdOnStore'?: string;
    /**
     * Unique identifier of the cart to prevent duplicate cart tracking.
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'cartId'?: string;
    /**
     * Quantity of the product.
     * @type {number}
     * @memberof TrackAddToCartRequestDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrackAddToCartRequestDto
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface TrackClickRequestDto
 */
export interface TrackClickRequestDto {
    /**
     * ADCIO Client ID of the store.
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'storeId': string;
    /**
     * The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app.
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'sessionId': string;
    /**
     * The device identifier should be unique for each device. A customer can have multiple devices.
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'deviceId': string;
    /**
     * The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API.
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'customerId'?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'sdkVersion'?: string;
    /**
     * Identifier for the suggestion request
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'requestId'?: string;
    /**
     * Product ID (on store).
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'productIdOnStore'?: string;
    /**
     * Product ID / Banner ID
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'adsetId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackClickRequestDto
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface TrackImpressionRequestDto
 */
export interface TrackImpressionRequestDto {
    /**
     * ADCIO Client ID of the store.
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'storeId': string;
    /**
     * The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app.
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'sessionId': string;
    /**
     * The device identifier should be unique for each device. A customer can have multiple devices.
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'deviceId': string;
    /**
     * The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API.
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'customerId'?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'sdkVersion'?: string;
    /**
     * Identifier for the suggestion request
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'requestId'?: string;
    /**
     * Product ID (on store).
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'productIdOnStore'?: string;
    /**
     * Product ID / Banner ID
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'adsetId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackImpressionRequestDto
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface TrackPageViewRequestDto
 */
export interface TrackPageViewRequestDto {
    /**
     * ADCIO Client ID of the store.
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'storeId': string;
    /**
     * The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app.
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'sessionId': string;
    /**
     * The device identifier should be unique for each device. A customer can have multiple devices.
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'deviceId': string;
    /**
     * The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API.
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'customerId'?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'sdkVersion'?: string;
    /**
     * Identifier for the suggestion request
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'requestId'?: string;
    /**
     * Product ID (on store).
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'productIdOnStore'?: string;
    /**
     * Product ID / Banner ID
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'adsetId'?: string;
    /**
     * Category ID (on store).
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'categoryIdOnStore'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackPageViewRequestDto
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface TrackPurchaseRequestDto
 */
export interface TrackPurchaseRequestDto {
    /**
     * ADCIO Client ID of the store.
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'storeId': string;
    /**
     * The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app.
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'sessionId': string;
    /**
     * The device identifier should be unique for each device. A customer can have multiple devices.
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'deviceId': string;
    /**
     * The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API.
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'customerId'?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'sdkVersion'?: string;
    /**
     * Identifier for the suggestion request
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'requestId'?: string;
    /**
     * Product ID (on store).
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'productIdOnStore'?: string;
    /**
     * Product ID / Banner ID
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'adsetId'?: string;
    /**
     * Category ID (on store).
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'categoryIdOnStore'?: string;
    /**
     * Unique identifier of the order to prevent duplicate purchase tracking.
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'orderId': string;
    /**
     * Quantity of the product.
     * @type {number}
     * @memberof TrackPurchaseRequestDto
     */
    'quantity'?: number;
    /**
     * The paid amount. It is used for calculating the ROAS.
     * @type {number}
     * @memberof TrackPurchaseRequestDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof TrackPurchaseRequestDto
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface TrackResponseDto
 */
export interface TrackResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof TrackResponseDto
     */
    'success': boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetData(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetData(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetData(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetData(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Log when the customer adds a product to the cart.
         * @summary 
         * @param {TrackAddToCartRequestDto} trackAddToCartRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnAddToCart: async (trackAddToCartRequestDto: TrackAddToCartRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackAddToCartRequestDto' is not null or undefined
            assertParamExists('eventsControllerOnAddToCart', 'trackAddToCartRequestDto', trackAddToCartRequestDto)
            const localVarPath = `/events/add-to-cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackAddToCartRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log a click.
         * @summary 
         * @param {TrackClickRequestDto} trackClickRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnClick: async (trackClickRequestDto: TrackClickRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackClickRequestDto' is not null or undefined
            assertParamExists('eventsControllerOnClick', 'trackClickRequestDto', trackClickRequestDto)
            const localVarPath = `/events/click`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackClickRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log an impression.
         * @summary 
         * @param {TrackImpressionRequestDto} trackImpressionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnImpression: async (trackImpressionRequestDto: TrackImpressionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackImpressionRequestDto' is not null or undefined
            assertParamExists('eventsControllerOnImpression', 'trackImpressionRequestDto', trackImpressionRequestDto)
            const localVarPath = `/events/impression`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackImpressionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log when the customer views a specific product / category page.
         * @summary 
         * @param {TrackPageViewRequestDto} trackPageViewRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnPageView: async (trackPageViewRequestDto: TrackPageViewRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackPageViewRequestDto' is not null or undefined
            assertParamExists('eventsControllerOnPageView', 'trackPageViewRequestDto', trackPageViewRequestDto)
            const localVarPath = `/events/view`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackPageViewRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log when the customer purchases a product.
         * @summary 
         * @param {TrackPurchaseRequestDto} trackPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnPurchase: async (trackPurchaseRequestDto: TrackPurchaseRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackPurchaseRequestDto' is not null or undefined
            assertParamExists('eventsControllerOnPurchase', 'trackPurchaseRequestDto', trackPurchaseRequestDto)
            const localVarPath = `/events/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trackPurchaseRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Log when the customer adds a product to the cart.
         * @summary 
         * @param {TrackAddToCartRequestDto} trackAddToCartRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsControllerOnAddToCart(trackAddToCartRequestDto: TrackAddToCartRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsControllerOnAddToCart(trackAddToCartRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Log a click.
         * @summary 
         * @param {TrackClickRequestDto} trackClickRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsControllerOnClick(trackClickRequestDto: TrackClickRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsControllerOnClick(trackClickRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Log an impression.
         * @summary 
         * @param {TrackImpressionRequestDto} trackImpressionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsControllerOnImpression(trackImpressionRequestDto: TrackImpressionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsControllerOnImpression(trackImpressionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Log when the customer views a specific product / category page.
         * @summary 
         * @param {TrackPageViewRequestDto} trackPageViewRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsControllerOnPageView(trackPageViewRequestDto: TrackPageViewRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsControllerOnPageView(trackPageViewRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Log when the customer purchases a product.
         * @summary 
         * @param {TrackPurchaseRequestDto} trackPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsControllerOnPurchase(trackPurchaseRequestDto: TrackPurchaseRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsControllerOnPurchase(trackPurchaseRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Log when the customer adds a product to the cart.
         * @summary 
         * @param {TrackAddToCartRequestDto} trackAddToCartRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnAddToCart(trackAddToCartRequestDto: TrackAddToCartRequestDto, options?: any): AxiosPromise<TrackResponseDto> {
            return localVarFp.eventsControllerOnAddToCart(trackAddToCartRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Log a click.
         * @summary 
         * @param {TrackClickRequestDto} trackClickRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnClick(trackClickRequestDto: TrackClickRequestDto, options?: any): AxiosPromise<TrackResponseDto> {
            return localVarFp.eventsControllerOnClick(trackClickRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Log an impression.
         * @summary 
         * @param {TrackImpressionRequestDto} trackImpressionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnImpression(trackImpressionRequestDto: TrackImpressionRequestDto, options?: any): AxiosPromise<TrackResponseDto> {
            return localVarFp.eventsControllerOnImpression(trackImpressionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Log when the customer views a specific product / category page.
         * @summary 
         * @param {TrackPageViewRequestDto} trackPageViewRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnPageView(trackPageViewRequestDto: TrackPageViewRequestDto, options?: any): AxiosPromise<TrackResponseDto> {
            return localVarFp.eventsControllerOnPageView(trackPageViewRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Log when the customer purchases a product.
         * @summary 
         * @param {TrackPurchaseRequestDto} trackPurchaseRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsControllerOnPurchase(trackPurchaseRequestDto: TrackPurchaseRequestDto, options?: any): AxiosPromise<TrackResponseDto> {
            return localVarFp.eventsControllerOnPurchase(trackPurchaseRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * Log when the customer adds a product to the cart.
     * @summary 
     * @param {TrackAddToCartRequestDto} trackAddToCartRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsControllerOnAddToCart(trackAddToCartRequestDto: TrackAddToCartRequestDto, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsControllerOnAddToCart(trackAddToCartRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Log a click.
     * @summary 
     * @param {TrackClickRequestDto} trackClickRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsControllerOnClick(trackClickRequestDto: TrackClickRequestDto, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsControllerOnClick(trackClickRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Log an impression.
     * @summary 
     * @param {TrackImpressionRequestDto} trackImpressionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsControllerOnImpression(trackImpressionRequestDto: TrackImpressionRequestDto, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsControllerOnImpression(trackImpressionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Log when the customer views a specific product / category page.
     * @summary 
     * @param {TrackPageViewRequestDto} trackPageViewRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsControllerOnPageView(trackPageViewRequestDto: TrackPageViewRequestDto, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsControllerOnPageView(trackPageViewRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Log when the customer purchases a product.
     * @summary 
     * @param {TrackPurchaseRequestDto} trackPurchaseRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsControllerOnPurchase(trackPurchaseRequestDto: TrackPurchaseRequestDto, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsControllerOnPurchase(trackPurchaseRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


