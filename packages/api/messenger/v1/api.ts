/* tslint:disable */
/* eslint-disable */
/**
 * ADCIO: Messenger
 *  ### Messenger: Chat Server 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChatParams
 */
export interface ChatParams {
    /**
     * 
     * @type {string}
     * @memberof ChatParams
     */
    'content': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ChatRole = {
    Assistant: 'assistant',
    User: 'user'
} as const;

export type ChatRole = typeof ChatRole[keyof typeof ChatRole];


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ChatType = {
    Chat: 'CHAT',
    Recommend: 'RECOMMEND',
    SearchItemInfo: 'SEARCH_ITEM_INFO',
    Error: 'ERROR'
} as const;

export type ChatType = typeof ChatType[keyof typeof ChatType];


/**
 * 
 * @export
 * @interface ExplainParams
 */
export interface ExplainParams {
    /**
     * 
     * @type {string}
     * @memberof ExplainParams
     */
    'product_id': string;
    /**
     * 
     * @type {string}
     * @memberof ExplainParams
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface TalkResponseMessage
 */
export interface TalkResponseMessage {
    /**
     * 
     * @type {ChatType}
     * @memberof TalkResponseMessage
     */
    'type': ChatType;
    /**
     * 
     * @type {string}
     * @memberof TalkResponseMessage
     */
    'key': string;
    /**
     * 
     * @type {boolean}
     * @memberof TalkResponseMessage
     */
    'done'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TalkResponseMessage
     */
    'group_id'?: string;
    /**
     * 
     * @type {ChatRole}
     * @memberof TalkResponseMessage
     */
    'role'?: ChatRole;
    /**
     * 
     * @type {string}
     * @memberof TalkResponseMessage
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof TalkResponseMessage
     */
    'delta'?: string;
    /**
     * 
     * @type {Array<TalkResponseMessageProduct>}
     * @memberof TalkResponseMessage
     */
    'chat_dialogue_products'?: Array<TalkResponseMessageProduct>;
    /**
     * 
     * @type {Array<any>}
     * @memberof TalkResponseMessage
     */
    'questions'?: Array<any>;
}


/**
 * 
 * @export
 * @interface TalkResponseMessageProduct
 */
export interface TalkResponseMessageProduct {
    /**
     * 
     * @type {object}
     * @memberof TalkResponseMessageProduct
     */
    'product': object;
    /**
     * 
     * @type {Array<string>}
     * @memberof TalkResponseMessageProduct
     */
    'tags': Array<string>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * ChatsApi - axios parameter creator
 * @export
 */
export const ChatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Chat
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {ChatParams} chatParams 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatApiV1ChatsClientIdGroupIdPost: async (clientId: string, groupId: string, chatParams: ChatParams, deviceId?: string, customerId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('chatApiV1ChatsClientIdGroupIdPost', 'clientId', clientId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('chatApiV1ChatsClientIdGroupIdPost', 'groupId', groupId)
            // verify required parameter 'chatParams' is not null or undefined
            assertParamExists('chatApiV1ChatsClientIdGroupIdPost', 'chatParams', chatParams)
            const localVarPath = `/api/v1/chats/{client_id}/{group_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Explain
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {ExplainParams} explainParams 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explainApiV1ChatsClientIdGroupIdExplainProductPost: async (clientId: string, groupId: string, explainParams: ExplainParams, deviceId?: string, customerId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('explainApiV1ChatsClientIdGroupIdExplainProductPost', 'clientId', clientId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('explainApiV1ChatsClientIdGroupIdExplainProductPost', 'groupId', groupId)
            // verify required parameter 'explainParams' is not null or undefined
            assertParamExists('explainApiV1ChatsClientIdGroupIdExplainProductPost', 'explainParams', explainParams)
            const localVarPath = `/api/v1/chats/{client_id}/{group_id}/explain-product`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(explainParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch Chat Dialogue
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchChatDialogueApiV1ChatsClientIdGroupIdGet: async (clientId: string, groupId: string, deviceId?: string, customerId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('fetchChatDialogueApiV1ChatsClientIdGroupIdGet', 'clientId', clientId)
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('fetchChatDialogueApiV1ChatsClientIdGroupIdGet', 'groupId', groupId)
            const localVarPath = `/api/v1/chats/{client_id}/{group_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)))
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatsApi - functional programming interface
 * @export
 */
export const ChatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Chat
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {ChatParams} chatParams 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatApiV1ChatsClientIdGroupIdPost(clientId: string, groupId: string, chatParams: ChatParams, deviceId?: string, customerId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TalkResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatApiV1ChatsClientIdGroupIdPost(clientId, groupId, chatParams, deviceId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Explain
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {ExplainParams} explainParams 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async explainApiV1ChatsClientIdGroupIdExplainProductPost(clientId: string, groupId: string, explainParams: ExplainParams, deviceId?: string, customerId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TalkResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.explainApiV1ChatsClientIdGroupIdExplainProductPost(clientId, groupId, explainParams, deviceId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fetch Chat Dialogue
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchChatDialogueApiV1ChatsClientIdGroupIdGet(clientId: string, groupId: string, deviceId?: string, customerId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TalkResponseMessage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchChatDialogueApiV1ChatsClientIdGroupIdGet(clientId, groupId, deviceId, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChatsApi - factory interface
 * @export
 */
export const ChatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Chat
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {ChatParams} chatParams 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatApiV1ChatsClientIdGroupIdPost(clientId: string, groupId: string, chatParams: ChatParams, deviceId?: string, customerId?: string, options?: any): AxiosPromise<TalkResponseMessage> {
            return localVarFp.chatApiV1ChatsClientIdGroupIdPost(clientId, groupId, chatParams, deviceId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Explain
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {ExplainParams} explainParams 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        explainApiV1ChatsClientIdGroupIdExplainProductPost(clientId: string, groupId: string, explainParams: ExplainParams, deviceId?: string, customerId?: string, options?: any): AxiosPromise<TalkResponseMessage> {
            return localVarFp.explainApiV1ChatsClientIdGroupIdExplainProductPost(clientId, groupId, explainParams, deviceId, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fetch Chat Dialogue
         * @param {string} clientId 
         * @param {string} groupId 
         * @param {string} [deviceId] 
         * @param {string} [customerId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchChatDialogueApiV1ChatsClientIdGroupIdGet(clientId: string, groupId: string, deviceId?: string, customerId?: string, options?: any): AxiosPromise<Array<TalkResponseMessage>> {
            return localVarFp.fetchChatDialogueApiV1ChatsClientIdGroupIdGet(clientId, groupId, deviceId, customerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatsApi - object-oriented interface
 * @export
 * @class ChatsApi
 * @extends {BaseAPI}
 */
export class ChatsApi extends BaseAPI {
    /**
     * 
     * @summary Chat
     * @param {string} clientId 
     * @param {string} groupId 
     * @param {ChatParams} chatParams 
     * @param {string} [deviceId] 
     * @param {string} [customerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public chatApiV1ChatsClientIdGroupIdPost(clientId: string, groupId: string, chatParams: ChatParams, deviceId?: string, customerId?: string, options?: AxiosRequestConfig) {
        return ChatsApiFp(this.configuration).chatApiV1ChatsClientIdGroupIdPost(clientId, groupId, chatParams, deviceId, customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Explain
     * @param {string} clientId 
     * @param {string} groupId 
     * @param {ExplainParams} explainParams 
     * @param {string} [deviceId] 
     * @param {string} [customerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public explainApiV1ChatsClientIdGroupIdExplainProductPost(clientId: string, groupId: string, explainParams: ExplainParams, deviceId?: string, customerId?: string, options?: AxiosRequestConfig) {
        return ChatsApiFp(this.configuration).explainApiV1ChatsClientIdGroupIdExplainProductPost(clientId, groupId, explainParams, deviceId, customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fetch Chat Dialogue
     * @param {string} clientId 
     * @param {string} groupId 
     * @param {string} [deviceId] 
     * @param {string} [customerId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public fetchChatDialogueApiV1ChatsClientIdGroupIdGet(clientId: string, groupId: string, deviceId?: string, customerId?: string, options?: AxiosRequestConfig) {
        return ChatsApiFp(this.configuration).fetchChatDialogueApiV1ChatsClientIdGroupIdGet(clientId, groupId, deviceId, customerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilsApi - axios parameter creator
 * @export
 */
export const UtilsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1UtilsHealthCheckGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/utils/health-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilsApi - functional programming interface
 * @export
 */
export const UtilsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1UtilsHealthCheckGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1UtilsHealthCheckGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilsApi - factory interface
 * @export
 */
export const UtilsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilsApiFp(configuration)
    return {
        /**
         * 
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1UtilsHealthCheckGet(options?: any): AxiosPromise<any> {
            return localVarFp.healthCheckApiV1UtilsHealthCheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilsApi - object-oriented interface
 * @export
 * @class UtilsApi
 * @extends {BaseAPI}
 */
export class UtilsApi extends BaseAPI {
    /**
     * 
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilsApi
     */
    public healthCheckApiV1UtilsHealthCheckGet(options?: AxiosRequestConfig) {
        return UtilsApiFp(this.configuration).healthCheckApiV1UtilsHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}


