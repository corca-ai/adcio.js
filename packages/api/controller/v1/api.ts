/* tslint:disable */
/* eslint-disable */
/**
 * ADCIO API:controller
 * The ADCIO API:controller specification
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdGroup
 */
export interface AdGroup {
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'type': AdGroupTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'placementId': string;
    /**
     * 
     * @type {number}
     * @memberof AdGroup
     */
    'maxBudgetPerDay': number;
    /**
     * 
     * @type {number}
     * @memberof AdGroup
     */
    'totalBudgetInPeriod': number | null;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'budgetType': AdGroupBudgetTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AdGroup
     */
    'dailyUsedBudget': number;
    /**
     * 
     * @type {number}
     * @memberof AdGroup
     */
    'totalUsedBudget': number;
    /**
     * 
     * @type {boolean}
     * @memberof AdGroup
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'endsAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'sellerId': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'campaignId': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroup
     */
    'deletedAt': string | null;
}

export const AdGroupTypeEnum = {
    Grid: 'GRID'
} as const;

export type AdGroupTypeEnum = typeof AdGroupTypeEnum[keyof typeof AdGroupTypeEnum];
export const AdGroupBudgetTypeEnum = {
    DailyBudget: 'DAILY_BUDGET',
    TotalBudgetInPeriod: 'TOTAL_BUDGET_IN_PERIOD',
    MaxBudgetPerDay: 'MAX_BUDGET_PER_DAY'
} as const;

export type AdGroupBudgetTypeEnum = typeof AdGroupBudgetTypeEnum[keyof typeof AdGroupBudgetTypeEnum];

/**
 * 
 * @export
 * @interface AdGroupTargetKey
 */
export interface AdGroupTargetKey {
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKey
     */
    'id': string;
    /**
     * 
     * @type {Client}
     * @memberof AdGroupTargetKey
     */
    'store': Client;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKey
     */
    'storeId': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKey
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKey
     */
    'label': string;
    /**
     * 
     * @type {Array<AdGroupTargetValue>}
     * @memberof AdGroupTargetKey
     */
    'selectValues': Array<AdGroupTargetValue>;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKey
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKey
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface AdGroupTargetKeyValueResponse
 */
export interface AdGroupTargetKeyValueResponse {
    /**
     * 
     * @type {AdGroupTargetKey}
     * @memberof AdGroupTargetKeyValueResponse
     */
    'key': AdGroupTargetKey;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKeyValueResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKeyValueResponse
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKeyValueResponse
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKeyValueResponse
     */
    'keyId': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKeyValueResponse
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetKeyValueResponse
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface AdGroupTargetValue
 */
export interface AdGroupTargetValue {
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetValue
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetValue
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetValue
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetValue
     */
    'keyId': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetValue
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupTargetValue
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface AdGroupWithSellerAndCampaign
 */
export interface AdGroupWithSellerAndCampaign {
    /**
     * 
     * @type {Array<AdGroupTargetKeyValueResponse>}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'targets': Array<AdGroupTargetKeyValueResponse>;
    /**
     * 
     * @type {Client}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'seller': Client;
    /**
     * 
     * @type {Campaign}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'campaign': Campaign;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'type': AdGroupWithSellerAndCampaignTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'placementId': string;
    /**
     * 
     * @type {number}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'maxBudgetPerDay': number;
    /**
     * 
     * @type {number}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'totalBudgetInPeriod': number | null;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'budgetType': AdGroupWithSellerAndCampaignBudgetTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'dailyUsedBudget': number;
    /**
     * 
     * @type {number}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'totalUsedBudget': number;
    /**
     * 
     * @type {boolean}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'endsAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'sellerId': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'campaignId': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof AdGroupWithSellerAndCampaign
     */
    'deletedAt': string | null;
}

export const AdGroupWithSellerAndCampaignTypeEnum = {
    Grid: 'GRID'
} as const;

export type AdGroupWithSellerAndCampaignTypeEnum = typeof AdGroupWithSellerAndCampaignTypeEnum[keyof typeof AdGroupWithSellerAndCampaignTypeEnum];
export const AdGroupWithSellerAndCampaignBudgetTypeEnum = {
    DailyBudget: 'DAILY_BUDGET',
    TotalBudgetInPeriod: 'TOTAL_BUDGET_IN_PERIOD',
    MaxBudgetPerDay: 'MAX_BUDGET_PER_DAY'
} as const;

export type AdGroupWithSellerAndCampaignBudgetTypeEnum = typeof AdGroupWithSellerAndCampaignBudgetTypeEnum[keyof typeof AdGroupWithSellerAndCampaignBudgetTypeEnum];

/**
 * 
 * @export
 * @interface AppendInjector
 */
export interface AppendInjector {
    /**
     * 
     * @type {string}
     * @memberof AppendInjector
     */
    'waitFor': string;
    /**
     * 
     * @type {string}
     * @memberof AppendInjector
     */
    'wrapper': string;
    /**
     * 
     * @type {string}
     * @memberof AppendInjector
     */
    'template'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppendInjector
     */
    'imageTemplate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppendInjector
     */
    'videoTemplate'?: string;
}
/**
 * 
 * @export
 * @interface Banner
 */
export interface Banner {
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'type': BannerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof Banner
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'categoryId': string | null;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'productId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Banner
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'appRoute': string | null;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'endsAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Banner
     */
    'deletedAt': string | null;
}

export const BannerTypeEnum = {
    Video: 'video',
    Image: 'image'
} as const;

export type BannerTypeEnum = typeof BannerTypeEnum[keyof typeof BannerTypeEnum];

/**
 * 
 * @export
 * @interface BannerControllerFetchMany200Response
 */
export interface BannerControllerFetchMany200Response {
    /**
     * 
     * @type {number}
     * @memberof BannerControllerFetchMany200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<FetchManyBannersResponseDto>}
     * @memberof BannerControllerFetchMany200Response
     */
    'items'?: Array<FetchManyBannersResponseDto>;
}
/**
 * 
 * @export
 * @interface BannerInjector
 */
export interface BannerInjector {
    /**
     * 
     * @type {Array<string>}
     * @memberof BannerInjector
     */
    'paths': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BannerInjector
     */
    'template'?: string;
    /**
     * 
     * @type {string}
     * @memberof BannerInjector
     */
    'imageTemplate'?: string;
    /**
     * 
     * @type {string}
     * @memberof BannerInjector
     */
    'videoTemplate'?: string;
}
/**
 * 
 * @export
 * @interface BannerSuggestionDto
 */
export interface BannerSuggestionDto {
    /**
     * 
     * @type {BannerWithCreativeDto}
     * @memberof BannerSuggestionDto
     */
    'banner': BannerWithCreativeDto;
    /**
     * 
     * @type {LogOptionsDto}
     * @memberof BannerSuggestionDto
     */
    'logOptions': LogOptionsDto;
}
/**
 * 
 * @export
 * @interface BannerSuggestionRequestDto
 */
export interface BannerSuggestionRequestDto {
    /**
     * The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app.
     * @type {string}
     * @memberof BannerSuggestionRequestDto
     */
    'sessionId': string;
    /**
     * The device identifier should be unique for each device. A customer can have multiple devices.
     * @type {string}
     * @memberof BannerSuggestionRequestDto
     */
    'deviceId': string;
    /**
     * The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API.
     * @type {string}
     * @memberof BannerSuggestionRequestDto
     */
    'customerId'?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof BannerSuggestionRequestDto
     */
    'sdkVersion'?: string;
    /**
     * Identifier for the placement which the suggestion will be placed.
     * @type {string}
     * @memberof BannerSuggestionRequestDto
     */
    'placementId': string;
    /**
     * The X coordinate of the placement in pixel.
     * @type {number}
     * @memberof BannerSuggestionRequestDto
     */
    'placementPositionX'?: number;
    /**
     * The Y coordinate of the placement in pixel.
     * @type {number}
     * @memberof BannerSuggestionRequestDto
     */
    'placementPositionY'?: number;
    /**
     * Whether the request is from the ADCIO agent or not. Default value is `false`.
     * @type {boolean}
     * @memberof BannerSuggestionRequestDto
     */
    'fromAgent'?: boolean;
    /**
     * 
     * @type {Array<SuggestionRequestTarget>}
     * @memberof BannerSuggestionRequestDto
     */
    'targets'?: Array<SuggestionRequestTarget>;
    /**
     * 
     * @type {string}
     * @memberof BannerSuggestionRequestDto
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface BannerSuggestionResponseDto
 */
export interface BannerSuggestionResponseDto {
    /**
     * 
     * @type {Array<BannerSuggestionDto>}
     * @memberof BannerSuggestionResponseDto
     */
    'suggestions': Array<BannerSuggestionDto>;
    /**
     * 
     * @type {SuggestionResponsePlacementType}
     * @memberof BannerSuggestionResponseDto
     */
    'placement': SuggestionResponsePlacementType;
    /**
     * 
     * @type {SuggestionMetadata}
     * @memberof BannerSuggestionResponseDto
     */
    'metadata': SuggestionMetadata;
}
/**
 * 
 * @export
 * @interface BannerWithCreative
 */
export interface BannerWithCreative {
    /**
     * 
     * @type {Array<Creative>}
     * @memberof BannerWithCreative
     */
    'creatives': Array<Creative>;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'type': BannerWithCreativeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof BannerWithCreative
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'categoryId': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'productId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BannerWithCreative
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'appRoute': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'endsAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreative
     */
    'deletedAt': string | null;
}

export const BannerWithCreativeTypeEnum = {
    Video: 'video',
    Image: 'image'
} as const;

export type BannerWithCreativeTypeEnum = typeof BannerWithCreativeTypeEnum[keyof typeof BannerWithCreativeTypeEnum];

/**
 * 
 * @export
 * @interface BannerWithCreativeDto
 */
export interface BannerWithCreativeDto {
    /**
     * 
     * @type {Creative}
     * @memberof BannerWithCreativeDto
     */
    'creative': Creative;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'type': BannerWithCreativeDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof BannerWithCreativeDto
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'categoryId': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'productId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BannerWithCreativeDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'appRoute': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'endsAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BannerWithCreativeDto
     */
    'deletedAt': string | null;
}

export const BannerWithCreativeDtoTypeEnum = {
    Video: 'video',
    Image: 'image'
} as const;

export type BannerWithCreativeDtoTypeEnum = typeof BannerWithCreativeDtoTypeEnum[keyof typeof BannerWithCreativeDtoTypeEnum];

/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'title': string;
    /**
     * 
     * @type {Client}
     * @memberof Campaign
     */
    'client': Client;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'clientId': string;
    /**
     * 
     * @type {Array<AdGroup>}
     * @memberof Campaign
     */
    'adGroups': Array<AdGroup>;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'clickLookbackWindowDays': number;
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'impressionLookbackWindowDays': number | null;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface CategoryWithPath
 */
export interface CategoryWithPath {
    /**
     * 
     * @type {string}
     * @memberof CategoryWithPath
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryWithPath
     */
    'idOnStore': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryWithPath
     */
    'storeId': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryWithPath
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryWithPath
     */
    'parentId': string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryWithPath
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CategoryWithPath
     */
    'path': Array<string>;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'currency': ClientCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'timezone': ClientTimezoneEnum;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'paidCredit': number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'freeCredit': number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'type': ClientTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'paymentCardId': string | null;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'storeId': string | null;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'businessLicenseId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Client
     */
    'isSeller': boolean;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'createdAt': string;
}

export const ClientCurrencyEnum = {
    Krw: 'KRW',
    Usd: 'USD',
    Vnd: 'VND'
} as const;

export type ClientCurrencyEnum = typeof ClientCurrencyEnum[keyof typeof ClientCurrencyEnum];
export const ClientTimezoneEnum = {
    Kst: 'KST',
    Ict: 'ICT',
    Est: 'EST',
    Cst: 'CST',
    Mst: 'MST',
    Pst: 'PST',
    Akst: 'AKST',
    Hst: 'HST'
} as const;

export type ClientTimezoneEnum = typeof ClientTimezoneEnum[keyof typeof ClientTimezoneEnum];
export const ClientTypeEnum = {
    PlatformAndSeller: 'PLATFORM_AND_SELLER',
    OwnWebsiteAndSeller: 'OWN_WEBSITE_AND_SELLER',
    Platform: 'PLATFORM',
    OwnWebsite: 'OWN_WEBSITE',
    Seller: 'SELLER',
    Admin: 'ADMIN'
} as const;

export type ClientTypeEnum = typeof ClientTypeEnum[keyof typeof ClientTypeEnum];

/**
 * 
 * @export
 * @interface ConnectProductsToPlacementDto
 */
export interface ConnectProductsToPlacementDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof ConnectProductsToPlacementDto
     */
    'productIds': Array<string>;
}
/**
 * 
 * @export
 * @interface ConnectProductsToPlacementResponseDto
 */
export interface ConnectProductsToPlacementResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'type': ConnectProductsToPlacementResponseDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'suggestionType': ConnectProductsToPlacementResponseDtoSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'bannerPlacementType': ConnectProductsToPlacementResponseDtoBannerPlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'supportEnvironment': ConnectProductsToPlacementResponseDtoSupportEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'developEnvironment': ConnectProductsToPlacementResponseDtoDevelopEnvironmentEnum;
    /**
     * 
     * @type {number}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'displayCount': number | null;
    /**
     * 
     * @type {number}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'minDisplayCount': number;
    /**
     * 
     * @type {number}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'maxDisplayCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'pageName': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {Injector}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'injector': Injector | null;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'screenShot': string;
    /**
     * 
     * @type {number}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'displayFormatWidth': number | null;
    /**
     * 
     * @type {number}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'displayFormatHeight': number | null;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'property': ConnectProductsToPlacementResponseDtoPropertyEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'displayPositions': Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'fixedProductIds': Array<string> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'tableSize': Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'widgetValueId': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'productDetailDataColumns': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'includingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'excludingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof ConnectProductsToPlacementResponseDto
     */
    'products': Array<Product>;
}

export const ConnectProductsToPlacementResponseDtoTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type ConnectProductsToPlacementResponseDtoTypeEnum = typeof ConnectProductsToPlacementResponseDtoTypeEnum[keyof typeof ConnectProductsToPlacementResponseDtoTypeEnum];
export const ConnectProductsToPlacementResponseDtoSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type ConnectProductsToPlacementResponseDtoSuggestionTypeEnum = typeof ConnectProductsToPlacementResponseDtoSuggestionTypeEnum[keyof typeof ConnectProductsToPlacementResponseDtoSuggestionTypeEnum];
export const ConnectProductsToPlacementResponseDtoBannerPlacementTypeEnum = {
    Static: 'STATIC',
    Slide: 'SLIDE'
} as const;

export type ConnectProductsToPlacementResponseDtoBannerPlacementTypeEnum = typeof ConnectProductsToPlacementResponseDtoBannerPlacementTypeEnum[keyof typeof ConnectProductsToPlacementResponseDtoBannerPlacementTypeEnum];
export const ConnectProductsToPlacementResponseDtoSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type ConnectProductsToPlacementResponseDtoSupportEnvironmentEnum = typeof ConnectProductsToPlacementResponseDtoSupportEnvironmentEnum[keyof typeof ConnectProductsToPlacementResponseDtoSupportEnvironmentEnum];
export const ConnectProductsToPlacementResponseDtoDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type ConnectProductsToPlacementResponseDtoDevelopEnvironmentEnum = typeof ConnectProductsToPlacementResponseDtoDevelopEnvironmentEnum[keyof typeof ConnectProductsToPlacementResponseDtoDevelopEnvironmentEnum];
export const ConnectProductsToPlacementResponseDtoPropertyEnum = {
    New: 'NEW',
    Hot: 'HOT',
    Personal: 'PERSONAL',
    SameGoods: 'SAME_GOODS',
    DiffGoods: 'DIFF_GOODS'
} as const;

export type ConnectProductsToPlacementResponseDtoPropertyEnum = typeof ConnectProductsToPlacementResponseDtoPropertyEnum[keyof typeof ConnectProductsToPlacementResponseDtoPropertyEnum];

/**
 * 
 * @export
 * @interface CreateBannerDto
 */
export interface CreateBannerDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'type': CreateBannerDtoTypeEnum;
    /**
     * 
     * @type {Array<UpsertCreativeDto>}
     * @memberof CreateBannerDto
     */
    'creatives': Array<UpsertCreativeDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateBannerDto
     */
    'placementIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'url'?: string;
    /**
     * 
     * @type {object}
     * @memberof CreateBannerDto
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'appRoute': string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'endsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'categoryId': string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBannerDto
     */
    'productId': string | null;
}

export const CreateBannerDtoTypeEnum = {
    Video: 'video',
    Image: 'image'
} as const;

export type CreateBannerDtoTypeEnum = typeof CreateBannerDtoTypeEnum[keyof typeof CreateBannerDtoTypeEnum];

/**
 * 
 * @export
 * @interface CreatePlacementDto
 */
export interface CreatePlacementDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'pageName': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'type': CreatePlacementDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'suggestionType': CreatePlacementDtoSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'bannerPlacementType'?: CreatePlacementDtoBannerPlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'supportEnvironment': CreatePlacementDtoSupportEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'developEnvironment': CreatePlacementDtoDevelopEnvironmentEnum;
    /**
     * 
     * @type {number}
     * @memberof CreatePlacementDto
     */
    'displayFormatWidth': number | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePlacementDto
     */
    'displayFormatHeight': number | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePlacementDto
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePlacementDto
     */
    'minDisplayCount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePlacementDto
     */
    'maxDisplayCount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePlacementDto
     */
    'displayCount'?: number;
    /**
     * 
     * @type {PlacementInjectorDto}
     * @memberof CreatePlacementDto
     */
    'injector'?: PlacementInjectorDto;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreatePlacementDto
     */
    'displayPositions'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreatePlacementDto
     */
    'tableSize'?: Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreatePlacementDto
     */
    'productDetailDataColumns'?: Array<string> | null;
}

export const CreatePlacementDtoTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type CreatePlacementDtoTypeEnum = typeof CreatePlacementDtoTypeEnum[keyof typeof CreatePlacementDtoTypeEnum];
export const CreatePlacementDtoSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type CreatePlacementDtoSuggestionTypeEnum = typeof CreatePlacementDtoSuggestionTypeEnum[keyof typeof CreatePlacementDtoSuggestionTypeEnum];
export const CreatePlacementDtoBannerPlacementTypeEnum = {
    Static: 'STATIC',
    Slide: 'SLIDE'
} as const;

export type CreatePlacementDtoBannerPlacementTypeEnum = typeof CreatePlacementDtoBannerPlacementTypeEnum[keyof typeof CreatePlacementDtoBannerPlacementTypeEnum];
export const CreatePlacementDtoSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type CreatePlacementDtoSupportEnvironmentEnum = typeof CreatePlacementDtoSupportEnvironmentEnum[keyof typeof CreatePlacementDtoSupportEnvironmentEnum];
export const CreatePlacementDtoDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type CreatePlacementDtoDevelopEnvironmentEnum = typeof CreatePlacementDtoDevelopEnvironmentEnum[keyof typeof CreatePlacementDtoDevelopEnvironmentEnum];

/**
 * 
 * @export
 * @interface CreateProductDto
 */
export interface CreateProductDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'idOnStore': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'image': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProductDto
     */
    'includeInRecommendation'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'sellerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'sellerIdOnStore'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'deepLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductDto
     */
    'caption'?: string;
}
/**
 * 
 * @export
 * @interface Creative
 */
export interface Creative {
    /**
     * 
     * @type {string}
     * @memberof Creative
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof Creative
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Creative
     */
    'mediaUrl': string;
    /**
     * 
     * @type {number}
     * @memberof Creative
     */
    'width': number | null;
    /**
     * 
     * @type {number}
     * @memberof Creative
     */
    'height': number | null;
    /**
     * 
     * @type {string}
     * @memberof Creative
     */
    'bannerId': string | null;
    /**
     * 
     * @type {string}
     * @memberof Creative
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Creative
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Creative
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface FetchActivePlacementsResponseDto
 */
export interface FetchActivePlacementsResponseDto {
    /**
     * 
     * @type {string}
     * @memberof FetchActivePlacementsResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FetchActivePlacementsResponseDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FetchActivePlacementsResponseDto
     */
    'suggestionType': FetchActivePlacementsResponseDtoSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchActivePlacementsResponseDto
     */
    'developEnvironment': FetchActivePlacementsResponseDtoDevelopEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchActivePlacementsResponseDto
     */
    'supportEnvironment': FetchActivePlacementsResponseDtoSupportEnvironmentEnum;
}

export const FetchActivePlacementsResponseDtoSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type FetchActivePlacementsResponseDtoSuggestionTypeEnum = typeof FetchActivePlacementsResponseDtoSuggestionTypeEnum[keyof typeof FetchActivePlacementsResponseDtoSuggestionTypeEnum];
export const FetchActivePlacementsResponseDtoDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type FetchActivePlacementsResponseDtoDevelopEnvironmentEnum = typeof FetchActivePlacementsResponseDtoDevelopEnvironmentEnum[keyof typeof FetchActivePlacementsResponseDtoDevelopEnvironmentEnum];
export const FetchActivePlacementsResponseDtoSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type FetchActivePlacementsResponseDtoSupportEnvironmentEnum = typeof FetchActivePlacementsResponseDtoSupportEnvironmentEnum[keyof typeof FetchActivePlacementsResponseDtoSupportEnvironmentEnum];

/**
 * 
 * @export
 * @interface FetchBannerResponseDto
 */
export interface FetchBannerResponseDto {
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'type': FetchBannerResponseDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof FetchBannerResponseDto
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'categoryId': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'productId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FetchBannerResponseDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'appRoute': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'endsAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchBannerResponseDto
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {CategoryWithPath}
     * @memberof FetchBannerResponseDto
     */
    'category': CategoryWithPath | null;
    /**
     * 
     * @type {Product}
     * @memberof FetchBannerResponseDto
     */
    'product': Product | null;
    /**
     * 
     * @type {Array<Placement>}
     * @memberof FetchBannerResponseDto
     */
    'placements': Array<Placement>;
    /**
     * 
     * @type {Array<Creative>}
     * @memberof FetchBannerResponseDto
     */
    'creatives': Array<Creative>;
}

export const FetchBannerResponseDtoTypeEnum = {
    Video: 'video',
    Image: 'image'
} as const;

export type FetchBannerResponseDtoTypeEnum = typeof FetchBannerResponseDtoTypeEnum[keyof typeof FetchBannerResponseDtoTypeEnum];

/**
 * 
 * @export
 * @interface FetchManyBannersResponseDto
 */
export interface FetchManyBannersResponseDto {
    /**
     * 
     * @type {Array<Creative>}
     * @memberof FetchManyBannersResponseDto
     */
    'creatives': Array<Creative>;
    /**
     * 
     * @type {Array<Placement>}
     * @memberof FetchManyBannersResponseDto
     */
    'placements': Array<Placement>;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'type': FetchManyBannersResponseDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'name': string;
    /**
     * 
     * @type {object}
     * @memberof FetchManyBannersResponseDto
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'categoryId': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'productId': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FetchManyBannersResponseDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'appRoute': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'endsAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyBannersResponseDto
     */
    'deletedAt': string | null;
}

export const FetchManyBannersResponseDtoTypeEnum = {
    Video: 'video',
    Image: 'image'
} as const;

export type FetchManyBannersResponseDtoTypeEnum = typeof FetchManyBannersResponseDtoTypeEnum[keyof typeof FetchManyBannersResponseDtoTypeEnum];

/**
 * 
 * @export
 * @interface FetchManyPlacementsResponseDto
 */
export interface FetchManyPlacementsResponseDto {
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {FetchPageClientDto}
     * @memberof FetchManyPlacementsResponseDto
     */
    'page': FetchPageClientDto;
    /**
     * 
     * @type {Array<Product>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'products': Array<Product>;
    /**
     * 
     * @type {Array<Banner>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'banners': Array<Banner>;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'type': FetchManyPlacementsResponseDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'suggestionType': FetchManyPlacementsResponseDtoSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'bannerPlacementType': FetchManyPlacementsResponseDtoBannerPlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'supportEnvironment': FetchManyPlacementsResponseDtoSupportEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'developEnvironment': FetchManyPlacementsResponseDtoDevelopEnvironmentEnum;
    /**
     * 
     * @type {number}
     * @memberof FetchManyPlacementsResponseDto
     */
    'displayCount': number | null;
    /**
     * 
     * @type {number}
     * @memberof FetchManyPlacementsResponseDto
     */
    'minDisplayCount': number;
    /**
     * 
     * @type {number}
     * @memberof FetchManyPlacementsResponseDto
     */
    'maxDisplayCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof FetchManyPlacementsResponseDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'pageName': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {Injector}
     * @memberof FetchManyPlacementsResponseDto
     */
    'injector': Injector | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'screenShot': string;
    /**
     * 
     * @type {number}
     * @memberof FetchManyPlacementsResponseDto
     */
    'displayFormatWidth': number | null;
    /**
     * 
     * @type {number}
     * @memberof FetchManyPlacementsResponseDto
     */
    'displayFormatHeight': number | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'property': FetchManyPlacementsResponseDtoPropertyEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'displayPositions': Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'fixedProductIds': Array<string> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'tableSize': Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'widgetValueId': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'productDetailDataColumns': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'includingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchManyPlacementsResponseDto
     */
    'excludingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchManyPlacementsResponseDto
     */
    'deletedAt': string | null;
}

export const FetchManyPlacementsResponseDtoTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type FetchManyPlacementsResponseDtoTypeEnum = typeof FetchManyPlacementsResponseDtoTypeEnum[keyof typeof FetchManyPlacementsResponseDtoTypeEnum];
export const FetchManyPlacementsResponseDtoSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type FetchManyPlacementsResponseDtoSuggestionTypeEnum = typeof FetchManyPlacementsResponseDtoSuggestionTypeEnum[keyof typeof FetchManyPlacementsResponseDtoSuggestionTypeEnum];
export const FetchManyPlacementsResponseDtoBannerPlacementTypeEnum = {
    Static: 'STATIC',
    Slide: 'SLIDE'
} as const;

export type FetchManyPlacementsResponseDtoBannerPlacementTypeEnum = typeof FetchManyPlacementsResponseDtoBannerPlacementTypeEnum[keyof typeof FetchManyPlacementsResponseDtoBannerPlacementTypeEnum];
export const FetchManyPlacementsResponseDtoSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type FetchManyPlacementsResponseDtoSupportEnvironmentEnum = typeof FetchManyPlacementsResponseDtoSupportEnvironmentEnum[keyof typeof FetchManyPlacementsResponseDtoSupportEnvironmentEnum];
export const FetchManyPlacementsResponseDtoDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type FetchManyPlacementsResponseDtoDevelopEnvironmentEnum = typeof FetchManyPlacementsResponseDtoDevelopEnvironmentEnum[keyof typeof FetchManyPlacementsResponseDtoDevelopEnvironmentEnum];
export const FetchManyPlacementsResponseDtoPropertyEnum = {
    New: 'NEW',
    Hot: 'HOT',
    Personal: 'PERSONAL',
    SameGoods: 'SAME_GOODS',
    DiffGoods: 'DIFF_GOODS'
} as const;

export type FetchManyPlacementsResponseDtoPropertyEnum = typeof FetchManyPlacementsResponseDtoPropertyEnum[keyof typeof FetchManyPlacementsResponseDtoPropertyEnum];

/**
 * 
 * @export
 * @interface FetchPageClientDto
 */
export interface FetchPageClientDto {
    /**
     * 
     * @type {string}
     * @memberof FetchPageClientDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPageClientDto
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPageClientDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPageClientDto
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {Client}
     * @memberof FetchPageClientDto
     */
    'client': Client;
}
/**
 * 
 * @export
 * @interface FetchPlacementResponseDto
 */
export interface FetchPlacementResponseDto {
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'type': FetchPlacementResponseDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'suggestionType': FetchPlacementResponseDtoSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'bannerPlacementType': FetchPlacementResponseDtoBannerPlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'supportEnvironment': FetchPlacementResponseDtoSupportEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'developEnvironment': FetchPlacementResponseDtoDevelopEnvironmentEnum;
    /**
     * 
     * @type {number}
     * @memberof FetchPlacementResponseDto
     */
    'displayCount': number | null;
    /**
     * 
     * @type {number}
     * @memberof FetchPlacementResponseDto
     */
    'minDisplayCount': number;
    /**
     * 
     * @type {number}
     * @memberof FetchPlacementResponseDto
     */
    'maxDisplayCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof FetchPlacementResponseDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'pageName': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {Injector}
     * @memberof FetchPlacementResponseDto
     */
    'injector': Injector | null;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'screenShot': string;
    /**
     * 
     * @type {number}
     * @memberof FetchPlacementResponseDto
     */
    'displayFormatWidth': number | null;
    /**
     * 
     * @type {number}
     * @memberof FetchPlacementResponseDto
     */
    'displayFormatHeight': number | null;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'property': FetchPlacementResponseDtoPropertyEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof FetchPlacementResponseDto
     */
    'displayPositions': Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchPlacementResponseDto
     */
    'fixedProductIds': Array<string> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof FetchPlacementResponseDto
     */
    'tableSize': Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'widgetValueId': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchPlacementResponseDto
     */
    'productDetailDataColumns': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchPlacementResponseDto
     */
    'includingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchPlacementResponseDto
     */
    'excludingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchPlacementResponseDto
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {FetchPageClientDto}
     * @memberof FetchPlacementResponseDto
     */
    'page': FetchPageClientDto;
    /**
     * 
     * @type {Array<ProductWithSeller>}
     * @memberof FetchPlacementResponseDto
     */
    'products'?: Array<ProductWithSeller>;
    /**
     * 
     * @type {Array<BannerWithCreative>}
     * @memberof FetchPlacementResponseDto
     */
    'banners'?: Array<BannerWithCreative>;
    /**
     * 
     * @type {Array<AdGroupWithSellerAndCampaign>}
     * @memberof FetchPlacementResponseDto
     */
    'adGroups'?: Array<AdGroupWithSellerAndCampaign>;
}

export const FetchPlacementResponseDtoTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type FetchPlacementResponseDtoTypeEnum = typeof FetchPlacementResponseDtoTypeEnum[keyof typeof FetchPlacementResponseDtoTypeEnum];
export const FetchPlacementResponseDtoSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type FetchPlacementResponseDtoSuggestionTypeEnum = typeof FetchPlacementResponseDtoSuggestionTypeEnum[keyof typeof FetchPlacementResponseDtoSuggestionTypeEnum];
export const FetchPlacementResponseDtoBannerPlacementTypeEnum = {
    Static: 'STATIC',
    Slide: 'SLIDE'
} as const;

export type FetchPlacementResponseDtoBannerPlacementTypeEnum = typeof FetchPlacementResponseDtoBannerPlacementTypeEnum[keyof typeof FetchPlacementResponseDtoBannerPlacementTypeEnum];
export const FetchPlacementResponseDtoSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type FetchPlacementResponseDtoSupportEnvironmentEnum = typeof FetchPlacementResponseDtoSupportEnvironmentEnum[keyof typeof FetchPlacementResponseDtoSupportEnvironmentEnum];
export const FetchPlacementResponseDtoDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type FetchPlacementResponseDtoDevelopEnvironmentEnum = typeof FetchPlacementResponseDtoDevelopEnvironmentEnum[keyof typeof FetchPlacementResponseDtoDevelopEnvironmentEnum];
export const FetchPlacementResponseDtoPropertyEnum = {
    New: 'NEW',
    Hot: 'HOT',
    Personal: 'PERSONAL',
    SameGoods: 'SAME_GOODS',
    DiffGoods: 'DIFF_GOODS'
} as const;

export type FetchPlacementResponseDtoPropertyEnum = typeof FetchPlacementResponseDtoPropertyEnum[keyof typeof FetchPlacementResponseDtoPropertyEnum];

/**
 * 
 * @export
 * @interface FetchProductResponseDto
 */
export interface FetchProductResponseDto {
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'idOnStore': string;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'storeId': string;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'sellerId': string;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof FetchProductResponseDto
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof FetchProductResponseDto
     */
    'discountPrice': number | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof FetchProductResponseDto
     */
    'additionalInformation': Array<object> | null;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'image': string;
    /**
     * 
     * @type {boolean}
     * @memberof FetchProductResponseDto
     */
    'includeInRecommendation': boolean;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'url': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'caption': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchProductResponseDto
     */
    'additionalImages': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FetchProductResponseDto
     */
    'decorationImages': Array<string> | null;
    /**
     * 
     * @type {Array<ProductIconImage>}
     * @memberof FetchProductResponseDto
     */
    'iconImages': Array<ProductIconImage> | null;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof FetchProductResponseDto
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {Client}
     * @memberof FetchProductResponseDto
     */
    'store': Client;
    /**
     * 
     * @type {Client}
     * @memberof FetchProductResponseDto
     */
    'seller': Client;
}
/**
 * 
 * @export
 * @interface GridInjector
 */
export interface GridInjector {
    /**
     * 
     * @type {Array<string>}
     * @memberof GridInjector
     */
    'paths': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GridInjector
     */
    'template': string;
}
/**
 * 
 * @export
 * @interface GridInjectorDto
 */
export interface GridInjectorDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof GridInjectorDto
     */
    'paths': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GridInjectorDto
     */
    'template': string;
}
/**
 * 
 * @export
 * @interface ImpressionObserver
 */
export interface ImpressionObserver {
    /**
     * 
     * @type {boolean}
     * @memberof ImpressionObserver
     */
    'useIntersectionObserver'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImpressionObserver
     */
    'className'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImpressionObserver
     */
    'wrapper'?: string;
}
/**
 * 
 * @export
 * @interface Injector
 */
export interface Injector {
    /**
     * 
     * @type {Retriever}
     * @memberof Injector
     */
    'retriever'?: Retriever;
    /**
     * 
     * @type {ImpressionObserver}
     * @memberof Injector
     */
    'impressionObserver'?: ImpressionObserver;
    /**
     * 
     * @type {Observer}
     * @memberof Injector
     */
    'observer'?: Observer;
    /**
     * 
     * @type {GridInjector}
     * @memberof Injector
     */
    'grid'?: GridInjector;
    /**
     * 
     * @type {BannerInjector}
     * @memberof Injector
     */
    'banner'?: BannerInjector;
    /**
     * 
     * @type {AppendInjector}
     * @memberof Injector
     */
    'append'?: AppendInjector;
    /**
     * 
     * @type {WidgetInjector}
     * @memberof Injector
     */
    'widget'?: WidgetInjector;
}
/**
 * 
 * @export
 * @interface LogOptionsDto
 */
export interface LogOptionsDto {
    /**
     * 
     * @type {string}
     * @memberof LogOptionsDto
     */
    'requestId': string;
    /**
     * 
     * @type {string}
     * @memberof LogOptionsDto
     */
    'adsetId': string;
}
/**
 * 
 * @export
 * @interface NestJSErrorSchema
 */
export interface NestJSErrorSchema {
    /**
     * 
     * @type {number}
     * @memberof NestJSErrorSchema
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof NestJSErrorSchema
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof NestJSErrorSchema
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Observer
 */
export interface Observer {
    /**
     * 
     * @type {string}
     * @memberof Observer
     */
    'impressedClassName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Observer
     */
    'wrapper'?: string;
}
/**
 * 
 * @export
 * @interface Placement
 */
export interface Placement {
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'type': PlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'suggestionType': PlacementSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'bannerPlacementType': PlacementBannerPlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'supportEnvironment': PlacementSupportEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'developEnvironment': PlacementDevelopEnvironmentEnum;
    /**
     * 
     * @type {number}
     * @memberof Placement
     */
    'displayCount': number | null;
    /**
     * 
     * @type {number}
     * @memberof Placement
     */
    'minDisplayCount': number;
    /**
     * 
     * @type {number}
     * @memberof Placement
     */
    'maxDisplayCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof Placement
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'pageName': string;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'clientId': string;
    /**
     * 
     * @type {Injector}
     * @memberof Placement
     */
    'injector': Injector | null;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'screenShot': string;
    /**
     * 
     * @type {number}
     * @memberof Placement
     */
    'displayFormatWidth': number | null;
    /**
     * 
     * @type {number}
     * @memberof Placement
     */
    'displayFormatHeight': number | null;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'property': PlacementPropertyEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof Placement
     */
    'displayPositions': Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Placement
     */
    'fixedProductIds': Array<string> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Placement
     */
    'tableSize': Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'widgetValueId': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Placement
     */
    'productDetailDataColumns': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Placement
     */
    'includingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Placement
     */
    'excludingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Placement
     */
    'deletedAt': string | null;
}

export const PlacementTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type PlacementTypeEnum = typeof PlacementTypeEnum[keyof typeof PlacementTypeEnum];
export const PlacementSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type PlacementSuggestionTypeEnum = typeof PlacementSuggestionTypeEnum[keyof typeof PlacementSuggestionTypeEnum];
export const PlacementBannerPlacementTypeEnum = {
    Static: 'STATIC',
    Slide: 'SLIDE'
} as const;

export type PlacementBannerPlacementTypeEnum = typeof PlacementBannerPlacementTypeEnum[keyof typeof PlacementBannerPlacementTypeEnum];
export const PlacementSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type PlacementSupportEnvironmentEnum = typeof PlacementSupportEnvironmentEnum[keyof typeof PlacementSupportEnvironmentEnum];
export const PlacementDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type PlacementDevelopEnvironmentEnum = typeof PlacementDevelopEnvironmentEnum[keyof typeof PlacementDevelopEnvironmentEnum];
export const PlacementPropertyEnum = {
    New: 'NEW',
    Hot: 'HOT',
    Personal: 'PERSONAL',
    SameGoods: 'SAME_GOODS',
    DiffGoods: 'DIFF_GOODS'
} as const;

export type PlacementPropertyEnum = typeof PlacementPropertyEnum[keyof typeof PlacementPropertyEnum];

/**
 * 
 * @export
 * @interface PlacementControllerFetchMany200Response
 */
export interface PlacementControllerFetchMany200Response {
    /**
     * 
     * @type {number}
     * @memberof PlacementControllerFetchMany200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<FetchManyPlacementsResponseDto>}
     * @memberof PlacementControllerFetchMany200Response
     */
    'items'?: Array<FetchManyPlacementsResponseDto>;
}
/**
 * 
 * @export
 * @interface PlacementFormat
 */
export interface PlacementFormat {
    /**
     * 
     * @type {string}
     * @memberof PlacementFormat
     */
    'ratio': string;
    /**
     * 
     * @type {Array<Creative>}
     * @memberof PlacementFormat
     */
    'creatives': Array<Creative>;
    /**
     * 
     * @type {Array<Placement>}
     * @memberof PlacementFormat
     */
    'placements': Array<Placement>;
}
/**
 * 
 * @export
 * @interface PlacementInjectorDto
 */
export interface PlacementInjectorDto {
    /**
     * 
     * @type {GridInjectorDto}
     * @memberof PlacementInjectorDto
     */
    'grid'?: GridInjectorDto;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'idOnStore': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'storeId': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'sellerId': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'discountPrice': number | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof Product
     */
    'additionalInformation': Array<object> | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'image': string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'includeInRecommendation': boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'url': string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'caption': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'additionalImages': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'decorationImages': Array<string> | null;
    /**
     * 
     * @type {Array<ProductIconImage>}
     * @memberof Product
     */
    'iconImages': Array<ProductIconImage> | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'deletedAt': string | null;
}
/**
 * 
 * @export
 * @interface ProductControllerFetchMany200Response
 */
export interface ProductControllerFetchMany200Response {
    /**
     * 
     * @type {number}
     * @memberof ProductControllerFetchMany200Response
     */
    'count'?: number;
    /**
     * 
     * @type {Array<FetchProductResponseDto>}
     * @memberof ProductControllerFetchMany200Response
     */
    'items'?: Array<FetchProductResponseDto>;
}
/**
 * 
 * @export
 * @interface ProductDetailDto
 */
export interface ProductDetailDto {
    /**
     * 
     * @type {string}
     * @memberof ProductDetailDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProductDetailDto
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface ProductFilterOperationDto
 */
export interface ProductFilterOperationDto {
    /**
     * 
     * @type {object}
     * @memberof ProductFilterOperationDto
     */
    'equalTo'?: object;
    /**
     * 
     * @type {object}
     * @memberof ProductFilterOperationDto
     */
    'not'?: object;
    /**
     * 
     * @type {string}
     * @memberof ProductFilterOperationDto
     */
    'contains'?: string;
}
/**
 * 
 * @export
 * @interface ProductIconImage
 */
export interface ProductIconImage {
    /**
     * 
     * @type {string}
     * @memberof ProductIconImage
     */
    'startsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductIconImage
     */
    'endsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductIconImage
     */
    'image': string;
}
/**
 * 
 * @export
 * @interface ProductSuggestionDto
 */
export interface ProductSuggestionDto {
    /**
     * 
     * @type {Product}
     * @memberof ProductSuggestionDto
     */
    'product': Product;
    /**
     * 
     * @type {LogOptionsDto}
     * @memberof ProductSuggestionDto
     */
    'logOptions': LogOptionsDto;
}
/**
 * 
 * @export
 * @interface ProductSuggestionRequestDto
 */
export interface ProductSuggestionRequestDto {
    /**
     * The session starts when the customer visits the store. It persists until the customer closes the tab, browser or app.
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'sessionId': string;
    /**
     * The device identifier should be unique for each device. A customer can have multiple devices.
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'deviceId': string;
    /**
     * The customer identifier which is generated and managed by the store. The store should configure `frontApi` parameter of ADCIO SDK so that the `customerId` can be sent to ADCIO API.
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'customerId'?: string;
    /**
     * The version of the SDK
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'sdkVersion'?: string;
    /**
     * Identifier for the placement which the suggestion will be placed.
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'placementId': string;
    /**
     * The X coordinate of the placement in pixel.
     * @type {number}
     * @memberof ProductSuggestionRequestDto
     */
    'placementPositionX'?: number;
    /**
     * The Y coordinate of the placement in pixel.
     * @type {number}
     * @memberof ProductSuggestionRequestDto
     */
    'placementPositionY'?: number;
    /**
     * Whether the request is from the ADCIO agent or not. Default value is `false`.
     * @type {boolean}
     * @memberof ProductSuggestionRequestDto
     */
    'fromAgent'?: boolean;
    /**
     * Identifier for the request client.
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'clientId': string;
    /**
     * Product IDs(on store) that should NOT be included in the suggestion.
     * @type {Array<string>}
     * @memberof ProductSuggestionRequestDto
     */
    'excludingProductIds'?: Array<string>;
    /**
     * Product IDs(on store) that support the fixed baseline suggestion.
     * @type {Array<string>}
     * @memberof ProductSuggestionRequestDto
     */
    'baselineProductIds'?: Array<string>;
    /**
     * The category id(on store) for filtering adsets.
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'categoryId'?: string;
    /**
     * Product filters for filtering adsets.
     * @type {Array<{ [key: string]: ProductFilterOperationDto; }>}
     * @memberof ProductSuggestionRequestDto
     */
    'filters'?: Array<{ [key: string]: ProductFilterOperationDto; }>;
    /**
     * 
     * @type {Array<SuggestionRequestTarget>}
     * @memberof ProductSuggestionRequestDto
     */
    'targets'?: Array<SuggestionRequestTarget>;
    /**
     * 
     * @type {string}
     * @memberof ProductSuggestionRequestDto
     */
    'userAgent'?: string;
}
/**
 * 
 * @export
 * @interface ProductSuggestionResponseDto
 */
export interface ProductSuggestionResponseDto {
    /**
     * 
     * @type {Array<ProductSuggestionDto>}
     * @memberof ProductSuggestionResponseDto
     */
    'suggestions': Array<ProductSuggestionDto>;
    /**
     * 
     * @type {SuggestionResponsePlacementType}
     * @memberof ProductSuggestionResponseDto
     */
    'placement': SuggestionResponsePlacementType;
    /**
     * 
     * @type {SuggestionMetadata}
     * @memberof ProductSuggestionResponseDto
     */
    'metadata': SuggestionMetadata;
}
/**
 * 
 * @export
 * @interface ProductWithSeller
 */
export interface ProductWithSeller {
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'idOnStore': string;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'storeId': string;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'sellerId': string;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ProductWithSeller
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof ProductWithSeller
     */
    'discountPrice': number | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductWithSeller
     */
    'additionalInformation': Array<object> | null;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'image': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductWithSeller
     */
    'includeInRecommendation': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'url': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'caption': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductWithSeller
     */
    'additionalImages': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductWithSeller
     */
    'decorationImages': Array<string> | null;
    /**
     * 
     * @type {Array<ProductIconImage>}
     * @memberof ProductWithSeller
     */
    'iconImages': Array<ProductIconImage> | null;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProductWithSeller
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {Client}
     * @memberof ProductWithSeller
     */
    'seller': Client;
}
/**
 * 
 * @export
 * @interface RemoveProductFromPlacementResponseDto
 */
export interface RemoveProductFromPlacementResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof RemoveProductFromPlacementResponseDto
     */
    'removed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RemoveProductFromPlacementResponseDto
     */
    'placementDeactivated': boolean;
}
/**
 * 
 * @export
 * @interface Retriever
 */
export interface Retriever {
    /**
     * 
     * @type {string}
     * @memberof Retriever
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof Retriever
     */
    'attribute': string;
    /**
     * 
     * @type {string}
     * @memberof Retriever
     */
    'matcher'?: RetrieverMatcherEnum;
}

export const RetrieverMatcherEnum = {
    Exact: 'exact',
    EndsWith: 'endsWith',
    StartsWith: 'startsWith',
    Contains: 'contains'
} as const;

export type RetrieverMatcherEnum = typeof RetrieverMatcherEnum[keyof typeof RetrieverMatcherEnum];

/**
 * 
 * @export
 * @interface SuggestionMetadata
 */
export interface SuggestionMetadata {
    /**
     * 
     * @type {boolean}
     * @memberof SuggestionMetadata
     */
    'isBaseline': boolean;
}
/**
 * 
 * @export
 * @interface SuggestionRequestTarget
 */
export interface SuggestionRequestTarget {
    /**
     * The name of the target.
     * @type {string}
     * @memberof SuggestionRequestTarget
     */
    'keyName': string;
    /**
     * The value of the target.
     * @type {Array<string>}
     * @memberof SuggestionRequestTarget
     */
    'values': Array<string>;
}
/**
 * 
 * @export
 * @interface SuggestionResponsePlacementType
 */
export interface SuggestionResponsePlacementType {
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'type': SuggestionResponsePlacementTypeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'suggestionType': SuggestionResponsePlacementTypeSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'bannerPlacementType': SuggestionResponsePlacementTypeBannerPlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'supportEnvironment': SuggestionResponsePlacementTypeSupportEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'developEnvironment': SuggestionResponsePlacementTypeDevelopEnvironmentEnum;
    /**
     * 
     * @type {number}
     * @memberof SuggestionResponsePlacementType
     */
    'displayCount': number | null;
    /**
     * 
     * @type {number}
     * @memberof SuggestionResponsePlacementType
     */
    'minDisplayCount': number;
    /**
     * 
     * @type {number}
     * @memberof SuggestionResponsePlacementType
     */
    'maxDisplayCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof SuggestionResponsePlacementType
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'pageName': string;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'clientId': string;
    /**
     * 
     * @type {Injector}
     * @memberof SuggestionResponsePlacementType
     */
    'injector': Injector | null;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'screenShot': string;
    /**
     * 
     * @type {number}
     * @memberof SuggestionResponsePlacementType
     */
    'displayFormatWidth': number | null;
    /**
     * 
     * @type {number}
     * @memberof SuggestionResponsePlacementType
     */
    'displayFormatHeight': number | null;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'property': SuggestionResponsePlacementTypePropertyEnum;
    /**
     * 
     * @type {PlacementFormat}
     * @memberof SuggestionResponsePlacementType
     */
    'placementFormat': PlacementFormat | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof SuggestionResponsePlacementType
     */
    'displayPositions': Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SuggestionResponsePlacementType
     */
    'fixedProductIds': Array<string> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof SuggestionResponsePlacementType
     */
    'tableSize': Array<number> | null;
    /**
     * 
     * @type {WidgetValue}
     * @memberof SuggestionResponsePlacementType
     */
    'widgetValue'?: WidgetValue | null;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'widgetValueId': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SuggestionResponsePlacementType
     */
    'productDetailDataColumns': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SuggestionResponsePlacementType
     */
    'includingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SuggestionResponsePlacementType
     */
    'excludingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof SuggestionResponsePlacementType
     */
    'deletedAt': string | null;
}

export const SuggestionResponsePlacementTypeTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type SuggestionResponsePlacementTypeTypeEnum = typeof SuggestionResponsePlacementTypeTypeEnum[keyof typeof SuggestionResponsePlacementTypeTypeEnum];
export const SuggestionResponsePlacementTypeSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type SuggestionResponsePlacementTypeSuggestionTypeEnum = typeof SuggestionResponsePlacementTypeSuggestionTypeEnum[keyof typeof SuggestionResponsePlacementTypeSuggestionTypeEnum];
export const SuggestionResponsePlacementTypeBannerPlacementTypeEnum = {
    Static: 'STATIC',
    Slide: 'SLIDE'
} as const;

export type SuggestionResponsePlacementTypeBannerPlacementTypeEnum = typeof SuggestionResponsePlacementTypeBannerPlacementTypeEnum[keyof typeof SuggestionResponsePlacementTypeBannerPlacementTypeEnum];
export const SuggestionResponsePlacementTypeSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type SuggestionResponsePlacementTypeSupportEnvironmentEnum = typeof SuggestionResponsePlacementTypeSupportEnvironmentEnum[keyof typeof SuggestionResponsePlacementTypeSupportEnvironmentEnum];
export const SuggestionResponsePlacementTypeDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type SuggestionResponsePlacementTypeDevelopEnvironmentEnum = typeof SuggestionResponsePlacementTypeDevelopEnvironmentEnum[keyof typeof SuggestionResponsePlacementTypeDevelopEnvironmentEnum];
export const SuggestionResponsePlacementTypePropertyEnum = {
    New: 'NEW',
    Hot: 'HOT',
    Personal: 'PERSONAL',
    SameGoods: 'SAME_GOODS',
    DiffGoods: 'DIFF_GOODS'
} as const;

export type SuggestionResponsePlacementTypePropertyEnum = typeof SuggestionResponsePlacementTypePropertyEnum[keyof typeof SuggestionResponsePlacementTypePropertyEnum];

/**
 * 
 * @export
 * @interface UpdateBannerDto
 */
export interface UpdateBannerDto {
    /**
     * 
     * @type {boolean}
     * @memberof UpdateBannerDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'name': string;
    /**
     * 
     * @type {Array<UpsertCreativeDto>}
     * @memberof UpdateBannerDto
     */
    'creatives': Array<UpsertCreativeDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateBannerDto
     */
    'placementIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'url'?: string;
    /**
     * 
     * @type {object}
     * @memberof UpdateBannerDto
     */
    'data': object;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'deepLink': string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'appRoute': string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'startsAt': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'endsAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'categoryId': string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBannerDto
     */
    'productId': string | null;
}
/**
 * 
 * @export
 * @interface UpdatePlacementDto
 */
export interface UpdatePlacementDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementDto
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdatePlacementDto
     */
    'activated'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementDto
     */
    'minDisplayCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementDto
     */
    'maxDisplayCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementDto
     */
    'displayCount'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdatePlacementDto
     */
    'displayPositions'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdatePlacementDto
     */
    'tableSize'?: Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdatePlacementDto
     */
    'productDetailDataColumns'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UpdatePlacementResponseDto
 */
export interface UpdatePlacementResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'placementFormatRatio': string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'type': UpdatePlacementResponseDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'suggestionType': UpdatePlacementResponseDtoSuggestionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'bannerPlacementType': UpdatePlacementResponseDtoBannerPlacementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'supportEnvironment': UpdatePlacementResponseDtoSupportEnvironmentEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'developEnvironment': UpdatePlacementResponseDtoDevelopEnvironmentEnum;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementResponseDto
     */
    'displayCount': number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementResponseDto
     */
    'minDisplayCount': number;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementResponseDto
     */
    'maxDisplayCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdatePlacementResponseDto
     */
    'activated': boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'pageName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {Injector}
     * @memberof UpdatePlacementResponseDto
     */
    'injector': Injector | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'screenShot': string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementResponseDto
     */
    'displayFormatWidth': number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlacementResponseDto
     */
    'displayFormatHeight': number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'property': UpdatePlacementResponseDtoPropertyEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdatePlacementResponseDto
     */
    'displayPositions': Array<number> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdatePlacementResponseDto
     */
    'fixedProductIds': Array<string> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdatePlacementResponseDto
     */
    'tableSize': Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'widgetValueId': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdatePlacementResponseDto
     */
    'productDetailDataColumns': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdatePlacementResponseDto
     */
    'includingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdatePlacementResponseDto
     */
    'excludingCategoryIds': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlacementResponseDto
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdatePlacementResponseDto
     */
    'placementDeactivated': boolean;
}

export const UpdatePlacementResponseDtoTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type UpdatePlacementResponseDtoTypeEnum = typeof UpdatePlacementResponseDtoTypeEnum[keyof typeof UpdatePlacementResponseDtoTypeEnum];
export const UpdatePlacementResponseDtoSuggestionTypeEnum = {
    Recommend: 'RECOMMEND',
    Advertise: 'ADVERTISE'
} as const;

export type UpdatePlacementResponseDtoSuggestionTypeEnum = typeof UpdatePlacementResponseDtoSuggestionTypeEnum[keyof typeof UpdatePlacementResponseDtoSuggestionTypeEnum];
export const UpdatePlacementResponseDtoBannerPlacementTypeEnum = {
    Static: 'STATIC',
    Slide: 'SLIDE'
} as const;

export type UpdatePlacementResponseDtoBannerPlacementTypeEnum = typeof UpdatePlacementResponseDtoBannerPlacementTypeEnum[keyof typeof UpdatePlacementResponseDtoBannerPlacementTypeEnum];
export const UpdatePlacementResponseDtoSupportEnvironmentEnum = {
    Web: 'WEB',
    WebMobile: 'WEB_MOBILE',
    App: 'APP'
} as const;

export type UpdatePlacementResponseDtoSupportEnvironmentEnum = typeof UpdatePlacementResponseDtoSupportEnvironmentEnum[keyof typeof UpdatePlacementResponseDtoSupportEnvironmentEnum];
export const UpdatePlacementResponseDtoDevelopEnvironmentEnum = {
    Widget: 'WIDGET',
    SelfDeveloped: 'SELF_DEVELOPED',
    CodeInjector: 'CODE_INJECTOR'
} as const;

export type UpdatePlacementResponseDtoDevelopEnvironmentEnum = typeof UpdatePlacementResponseDtoDevelopEnvironmentEnum[keyof typeof UpdatePlacementResponseDtoDevelopEnvironmentEnum];
export const UpdatePlacementResponseDtoPropertyEnum = {
    New: 'NEW',
    Hot: 'HOT',
    Personal: 'PERSONAL',
    SameGoods: 'SAME_GOODS',
    DiffGoods: 'DIFF_GOODS'
} as const;

export type UpdatePlacementResponseDtoPropertyEnum = typeof UpdatePlacementResponseDtoPropertyEnum[keyof typeof UpdatePlacementResponseDtoPropertyEnum];

/**
 * 
 * @export
 * @interface UpdateProductDto
 */
export interface UpdateProductDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'idOnStore'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductDto
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateProductDto
     */
    'includeInRecommendation'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'sellerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'deepLink'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductDto
     */
    'caption'?: string | null;
}
/**
 * 
 * @export
 * @interface UpsertCreativeDto
 */
export interface UpsertCreativeDto {
    /**
     * 
     * @type {string}
     * @memberof UpsertCreativeDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertCreativeDto
     */
    'mediaUrl': string;
    /**
     * 
     * @type {number}
     * @memberof UpsertCreativeDto
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpsertCreativeDto
     */
    'height'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpsertCreativeDto
     */
    'placementFormatRatio'?: string;
}
/**
 * 
 * @export
 * @interface UpsertManyProductDto
 */
export interface UpsertManyProductDto {
    /**
     * 
     * @type {Array<UpsertProductDto>}
     * @memberof UpsertManyProductDto
     */
    'data': Array<UpsertProductDto>;
}
/**
 * 
 * @export
 * @interface UpsertManyProductResponseDto
 */
export interface UpsertManyProductResponseDto {
    /**
     * 
     * @type {number}
     * @memberof UpsertManyProductResponseDto
     */
    'insertedCount': number;
    /**
     * 
     * @type {Array<UpsertProductFailedRow>}
     * @memberof UpsertManyProductResponseDto
     */
    'failedRows': Array<UpsertProductFailedRow>;
}
/**
 * 
 * @export
 * @interface UpsertProductDto
 */
export interface UpsertProductDto {
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'idOnStore'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpsertProductDto
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpsertProductDto
     */
    'discountPrice'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof UpsertProductDto
     */
    'additionalInformation'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpsertProductDto
     */
    'includeInRecommendation'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'sellerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'sellerIdOnStore'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'deepLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductDto
     */
    'caption'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpsertProductDto
     */
    'additionalImages'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpsertProductDto
     */
    'decorationImages'?: Array<string>;
    /**
     * 
     * @type {ProductDetailDto}
     * @memberof UpsertProductDto
     */
    'detail'?: ProductDetailDto;
}
/**
 * 
 * @export
 * @interface UpsertProductFailedRow
 */
export interface UpsertProductFailedRow {
    /**
     * 
     * @type {string}
     * @memberof UpsertProductFailedRow
     */
    'idOnStore': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertProductFailedRow
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpsertProductFailedRow
     */
    'reasons': Array<UpsertProductFailedRowReasonsEnum>;
}

export const UpsertProductFailedRowReasonsEnum = {
    UpsertProductFailedDeuplicatedRow: 'upsertProductFailedDeuplicatedRow',
    UpsertProductFailedSellerIsNotExist: 'upsertProductFailedSellerIsNotExist',
    UpsertProductFailedIdIsEmpty: 'upsertProductFailedIdIsEmpty',
    UpsertProductFailedNameIsEmpty: 'upsertProductFailedNameIsEmpty',
    UpsertProductFailedPriceIsEmpty: 'upsertProductFailedPriceIsEmpty',
    UpsertProductFailedImageIsEmpty: 'upsertProductFailedImageIsEmpty',
    UpsertProductFailedImageIsInvalid: 'upsertProductFailedImageIsInvalid',
    UpsertProductFailedUrlIsInvalid: 'upsertProductFailedUrlIsInvalid',
    UpsertProductFailedAdditionalImagesIsInvalid: 'upsertProductFailedAdditionalImagesIsInvalid',
    UpsertProductFailedDecorationImagesIsInvalid: 'upsertProductFailedDecorationImagesIsInvalid'
} as const;

export type UpsertProductFailedRowReasonsEnum = typeof UpsertProductFailedRowReasonsEnum[keyof typeof UpsertProductFailedRowReasonsEnum];

/**
 * 
 * @export
 * @interface Widget
 */
export interface Widget {
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof Widget
     */
    'placementType': WidgetPlacementTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof Widget
     */
    'columnSchema': object;
    /**
     * 
     * @type {object}
     * @memberof Widget
     */
    'uiSchema': object;
}

export const WidgetPlacementTypeEnum = {
    Grid: 'GRID',
    Banner: 'BANNER'
} as const;

export type WidgetPlacementTypeEnum = typeof WidgetPlacementTypeEnum[keyof typeof WidgetPlacementTypeEnum];

/**
 * 
 * @export
 * @interface WidgetInjector
 */
export interface WidgetInjector {
    /**
     * 
     * @type {string}
     * @memberof WidgetInjector
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof WidgetInjector
     */
    'wrapper': string;
    /**
     * 
     * @type {string}
     * @memberof WidgetInjector
     */
    'template'?: string;
    /**
     * 
     * @type {string}
     * @memberof WidgetInjector
     */
    'imageTemplate'?: string;
    /**
     * 
     * @type {string}
     * @memberof WidgetInjector
     */
    'videoTemplate'?: string;
    /**
     * 
     * @type {object}
     * @memberof WidgetInjector
     */
    'swiper'?: object;
}
/**
 * 
 * @export
 * @interface WidgetValue
 */
export interface WidgetValue {
    /**
     * 
     * @type {string}
     * @memberof WidgetValue
     */
    'id': string;
    /**
     * 
     * @type {Widget}
     * @memberof WidgetValue
     */
    'widget': Widget;
    /**
     * 
     * @type {string}
     * @memberof WidgetValue
     */
    'widgetId': string;
    /**
     * 
     * @type {object}
     * @memberof WidgetValue
     */
    'values': object;
}

/**
 * BannerApi - axios parameter creator
 * @export
 */
export const BannerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBannerDto} createBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerCreate: async (createBannerDto: CreateBannerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBannerDto' is not null or undefined
            assertParamExists('bannerControllerCreate', 'createBannerDto', createBannerDto)
            const localVarPath = `/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBannerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bannerControllerDelete', 'id', id)
            const localVarPath = `/banners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [orderBy] BannerSortOption
         * @param {Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>} [select] 
         * @param {boolean} [activated] 
         * @param {string} [name] 
         * @param {Array<string>} [placementIds] 
         * @param {'video' | 'image'} [type] 
         * @param {string} [startsAt] 
         * @param {string} [endsAt] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerFetchMany: async (orderBy?: Array<string>, select?: Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>, activated?: boolean, name?: string, placementIds?: Array<string>, type?: 'video' | 'image', startsAt?: string, endsAt?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (orderBy) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select) {
                localVarQueryParameter['select'] = select;
            }

            if (activated !== undefined) {
                localVarQueryParameter['activated'] = activated;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (placementIds) {
                localVarQueryParameter['placementIds'] = placementIds;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startsAt !== undefined) {
                localVarQueryParameter['startsAt'] = (startsAt as any instanceof Date) ?
                    (startsAt as any).toISOString() :
                    startsAt;
            }

            if (endsAt !== undefined) {
                localVarQueryParameter['endsAt'] = (endsAt as any instanceof Date) ?
                    (endsAt as any).toISOString() :
                    endsAt;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerFetchOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bannerControllerFetchOne', 'id', id)
            const localVarPath = `/banners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateBannerDto} updateBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerUpdate: async (id: string, updateBannerDto: UpdateBannerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bannerControllerUpdate', 'id', id)
            // verify required parameter 'updateBannerDto' is not null or undefined
            assertParamExists('bannerControllerUpdate', 'updateBannerDto', updateBannerDto)
            const localVarPath = `/banners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBannerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BannerApi - functional programming interface
 * @export
 */
export const BannerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BannerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBannerDto} createBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bannerControllerCreate(createBannerDto: CreateBannerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Banner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bannerControllerCreate(createBannerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bannerControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bannerControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [orderBy] BannerSortOption
         * @param {Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>} [select] 
         * @param {boolean} [activated] 
         * @param {string} [name] 
         * @param {Array<string>} [placementIds] 
         * @param {'video' | 'image'} [type] 
         * @param {string} [startsAt] 
         * @param {string} [endsAt] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bannerControllerFetchMany(orderBy?: Array<string>, select?: Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>, activated?: boolean, name?: string, placementIds?: Array<string>, type?: 'video' | 'image', startsAt?: string, endsAt?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BannerControllerFetchMany200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bannerControllerFetchMany(orderBy, select, activated, name, placementIds, type, startsAt, endsAt, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bannerControllerFetchOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchBannerResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bannerControllerFetchOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateBannerDto} updateBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bannerControllerUpdate(id: string, updateBannerDto: UpdateBannerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Banner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bannerControllerUpdate(id, updateBannerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BannerApi - factory interface
 * @export
 */
export const BannerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BannerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateBannerDto} createBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerCreate(createBannerDto: CreateBannerDto, options?: any): AxiosPromise<Banner> {
            return localVarFp.bannerControllerCreate(createBannerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.bannerControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [orderBy] BannerSortOption
         * @param {Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>} [select] 
         * @param {boolean} [activated] 
         * @param {string} [name] 
         * @param {Array<string>} [placementIds] 
         * @param {'video' | 'image'} [type] 
         * @param {string} [startsAt] 
         * @param {string} [endsAt] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerFetchMany(orderBy?: Array<string>, select?: Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>, activated?: boolean, name?: string, placementIds?: Array<string>, type?: 'video' | 'image', startsAt?: string, endsAt?: string, limit?: number, offset?: number, options?: any): AxiosPromise<BannerControllerFetchMany200Response> {
            return localVarFp.bannerControllerFetchMany(orderBy, select, activated, name, placementIds, type, startsAt, endsAt, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerFetchOne(id: string, options?: any): AxiosPromise<FetchBannerResponseDto> {
            return localVarFp.bannerControllerFetchOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateBannerDto} updateBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bannerControllerUpdate(id: string, updateBannerDto: UpdateBannerDto, options?: any): AxiosPromise<Banner> {
            return localVarFp.bannerControllerUpdate(id, updateBannerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BannerApi - object-oriented interface
 * @export
 * @class BannerApi
 * @extends {BaseAPI}
 */
export class BannerApi extends BaseAPI {
    /**
     * 
     * @param {CreateBannerDto} createBannerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public bannerControllerCreate(createBannerDto: CreateBannerDto, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).bannerControllerCreate(createBannerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public bannerControllerDelete(id: string, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).bannerControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} [orderBy] BannerSortOption
     * @param {Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>} [select] 
     * @param {boolean} [activated] 
     * @param {string} [name] 
     * @param {Array<string>} [placementIds] 
     * @param {'video' | 'image'} [type] 
     * @param {string} [startsAt] 
     * @param {string} [endsAt] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public bannerControllerFetchMany(orderBy?: Array<string>, select?: Array<'id' | 'name' | 'imageUrl' | 'url' | 'data' | 'activated' | 'startsAt' | 'endsAt' | 'createdAt'>, activated?: boolean, name?: string, placementIds?: Array<string>, type?: 'video' | 'image', startsAt?: string, endsAt?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).bannerControllerFetchMany(orderBy, select, activated, name, placementIds, type, startsAt, endsAt, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public bannerControllerFetchOne(id: string, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).bannerControllerFetchOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateBannerDto} updateBannerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BannerApi
     */
    public bannerControllerUpdate(id: string, updateBannerDto: UpdateBannerDto, options?: AxiosRequestConfig) {
        return BannerApiFp(this.configuration).bannerControllerUpdate(id, updateBannerDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PageApi - axios parameter creator
 * @export
 */
export const PageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch active placements of the page.
         * @summary 
         * @param {string} name 
         * @param {string} clientId The client ID of the placement owner.
         * @param {'WEB' | 'WEB_MOBILE' | 'APP'} [supportEnvironment] The support environment of the placement.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageControllerFetchActivePlacements: async (name: string, clientId: string, supportEnvironment?: 'WEB' | 'WEB_MOBILE' | 'APP', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('pageControllerFetchActivePlacements', 'name', name)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('pageControllerFetchActivePlacements', 'clientId', clientId)
            const localVarPath = `/pages/{name}/placements`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }

            if (supportEnvironment !== undefined) {
                localVarQueryParameter['supportEnvironment'] = supportEnvironment;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PageApi - functional programming interface
 * @export
 */
export const PageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PageApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch active placements of the page.
         * @summary 
         * @param {string} name 
         * @param {string} clientId The client ID of the placement owner.
         * @param {'WEB' | 'WEB_MOBILE' | 'APP'} [supportEnvironment] The support environment of the placement.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pageControllerFetchActivePlacements(name: string, clientId: string, supportEnvironment?: 'WEB' | 'WEB_MOBILE' | 'APP', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FetchActivePlacementsResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pageControllerFetchActivePlacements(name, clientId, supportEnvironment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PageApi - factory interface
 * @export
 */
export const PageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PageApiFp(configuration)
    return {
        /**
         * Fetch active placements of the page.
         * @summary 
         * @param {string} name 
         * @param {string} clientId The client ID of the placement owner.
         * @param {'WEB' | 'WEB_MOBILE' | 'APP'} [supportEnvironment] The support environment of the placement.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageControllerFetchActivePlacements(name: string, clientId: string, supportEnvironment?: 'WEB' | 'WEB_MOBILE' | 'APP', options?: any): AxiosPromise<Array<FetchActivePlacementsResponseDto>> {
            return localVarFp.pageControllerFetchActivePlacements(name, clientId, supportEnvironment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PageApi - object-oriented interface
 * @export
 * @class PageApi
 * @extends {BaseAPI}
 */
export class PageApi extends BaseAPI {
    /**
     * Fetch active placements of the page.
     * @summary 
     * @param {string} name 
     * @param {string} clientId The client ID of the placement owner.
     * @param {'WEB' | 'WEB_MOBILE' | 'APP'} [supportEnvironment] The support environment of the placement.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PageApi
     */
    public pageControllerFetchActivePlacements(name: string, clientId: string, supportEnvironment?: 'WEB' | 'WEB_MOBILE' | 'APP', options?: AxiosRequestConfig) {
        return PageApiFp(this.configuration).pageControllerFetchActivePlacements(name, clientId, supportEnvironment, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlacementApi - axios parameter creator
 * @export
 */
export const PlacementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {ConnectProductsToPlacementDto} connectProductsToPlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerConnectProducts: async (id: string, connectProductsToPlacementDto: ConnectProductsToPlacementDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placementControllerConnectProducts', 'id', id)
            // verify required parameter 'connectProductsToPlacementDto' is not null or undefined
            assertParamExists('placementControllerConnectProducts', 'connectProductsToPlacementDto', connectProductsToPlacementDto)
            const localVarPath = `/placements/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectProductsToPlacementDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePlacementDto} createPlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerCreate: async (createPlacementDto: CreatePlacementDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPlacementDto' is not null or undefined
            assertParamExists('placementControllerCreate', 'createPlacementDto', createPlacementDto)
            const localVarPath = `/placements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPlacementDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [orderBy] PlacementSortOption
         * @param {Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>} [select] 
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {'GRID' | 'BANNER'} [type] 
         * @param {'RECOMMEND' | 'ADVERTISE'} [suggestionType] 
         * @param {boolean} [activated] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerFetchMany: async (orderBy?: Array<string>, select?: Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>, title?: string, startDate?: string, endDate?: string, type?: 'GRID' | 'BANNER', suggestionType?: 'RECOMMEND' | 'ADVERTISE', activated?: boolean, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/placements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (orderBy) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (select) {
                localVarQueryParameter['select'] = select;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (suggestionType !== undefined) {
                localVarQueryParameter['suggestionType'] = suggestionType;
            }

            if (activated !== undefined) {
                localVarQueryParameter['activated'] = activated;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerFetchOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placementControllerFetchOne', 'id', id)
            const localVarPath = `/placements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placementControllerRemove', 'id', id)
            const localVarPath = `/placements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerRemoveProduct: async (id: string, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placementControllerRemoveProduct', 'id', id)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('placementControllerRemoveProduct', 'productId', productId)
            const localVarPath = `/placements/{id}/products/{productId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePlacementDto} updatePlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerUpdate: async (id: string, updatePlacementDto: UpdatePlacementDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('placementControllerUpdate', 'id', id)
            // verify required parameter 'updatePlacementDto' is not null or undefined
            assertParamExists('placementControllerUpdate', 'updatePlacementDto', updatePlacementDto)
            const localVarPath = `/placements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePlacementDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlacementApi - functional programming interface
 * @export
 */
export const PlacementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlacementApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {ConnectProductsToPlacementDto} connectProductsToPlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placementControllerConnectProducts(id: string, connectProductsToPlacementDto: ConnectProductsToPlacementDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectProductsToPlacementResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placementControllerConnectProducts(id, connectProductsToPlacementDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePlacementDto} createPlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placementControllerCreate(createPlacementDto: CreatePlacementDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Placement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placementControllerCreate(createPlacementDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [orderBy] PlacementSortOption
         * @param {Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>} [select] 
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {'GRID' | 'BANNER'} [type] 
         * @param {'RECOMMEND' | 'ADVERTISE'} [suggestionType] 
         * @param {boolean} [activated] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placementControllerFetchMany(orderBy?: Array<string>, select?: Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>, title?: string, startDate?: string, endDate?: string, type?: 'GRID' | 'BANNER', suggestionType?: 'RECOMMEND' | 'ADVERTISE', activated?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlacementControllerFetchMany200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placementControllerFetchMany(orderBy, select, title, startDate, endDate, type, suggestionType, activated, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placementControllerFetchOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchPlacementResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placementControllerFetchOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placementControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placementControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placementControllerRemoveProduct(id: string, productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveProductFromPlacementResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placementControllerRemoveProduct(id, productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePlacementDto} updatePlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placementControllerUpdate(id: string, updatePlacementDto: UpdatePlacementDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatePlacementResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placementControllerUpdate(id, updatePlacementDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlacementApi - factory interface
 * @export
 */
export const PlacementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlacementApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {ConnectProductsToPlacementDto} connectProductsToPlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerConnectProducts(id: string, connectProductsToPlacementDto: ConnectProductsToPlacementDto, options?: any): AxiosPromise<ConnectProductsToPlacementResponseDto> {
            return localVarFp.placementControllerConnectProducts(id, connectProductsToPlacementDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePlacementDto} createPlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerCreate(createPlacementDto: CreatePlacementDto, options?: any): AxiosPromise<Placement> {
            return localVarFp.placementControllerCreate(createPlacementDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [orderBy] PlacementSortOption
         * @param {Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>} [select] 
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {'GRID' | 'BANNER'} [type] 
         * @param {'RECOMMEND' | 'ADVERTISE'} [suggestionType] 
         * @param {boolean} [activated] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerFetchMany(orderBy?: Array<string>, select?: Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>, title?: string, startDate?: string, endDate?: string, type?: 'GRID' | 'BANNER', suggestionType?: 'RECOMMEND' | 'ADVERTISE', activated?: boolean, limit?: number, offset?: number, options?: any): AxiosPromise<PlacementControllerFetchMany200Response> {
            return localVarFp.placementControllerFetchMany(orderBy, select, title, startDate, endDate, type, suggestionType, activated, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerFetchOne(id: string, options?: any): AxiosPromise<FetchPlacementResponseDto> {
            return localVarFp.placementControllerFetchOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.placementControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerRemoveProduct(id: string, productId: string, options?: any): AxiosPromise<RemoveProductFromPlacementResponseDto> {
            return localVarFp.placementControllerRemoveProduct(id, productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdatePlacementDto} updatePlacementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placementControllerUpdate(id: string, updatePlacementDto: UpdatePlacementDto, options?: any): AxiosPromise<UpdatePlacementResponseDto> {
            return localVarFp.placementControllerUpdate(id, updatePlacementDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlacementApi - object-oriented interface
 * @export
 * @class PlacementApi
 * @extends {BaseAPI}
 */
export class PlacementApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {ConnectProductsToPlacementDto} connectProductsToPlacementDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacementApi
     */
    public placementControllerConnectProducts(id: string, connectProductsToPlacementDto: ConnectProductsToPlacementDto, options?: AxiosRequestConfig) {
        return PlacementApiFp(this.configuration).placementControllerConnectProducts(id, connectProductsToPlacementDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePlacementDto} createPlacementDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacementApi
     */
    public placementControllerCreate(createPlacementDto: CreatePlacementDto, options?: AxiosRequestConfig) {
        return PlacementApiFp(this.configuration).placementControllerCreate(createPlacementDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} [orderBy] PlacementSortOption
     * @param {Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>} [select] 
     * @param {string} [title] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {'GRID' | 'BANNER'} [type] 
     * @param {'RECOMMEND' | 'ADVERTISE'} [suggestionType] 
     * @param {boolean} [activated] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacementApi
     */
    public placementControllerFetchMany(orderBy?: Array<string>, select?: Array<'id' | 'title' | 'type' | 'suggestionType' | 'displayCount' | 'activated' | 'pageName' | 'clientId' | 'injector' | 'screenShot' | 'displayFormatWidth' | 'displayFormatHeight' | 'property' | 'placementFormatRatio' | 'createdAt' | 'updatedAt' | 'deletedAt'>, title?: string, startDate?: string, endDate?: string, type?: 'GRID' | 'BANNER', suggestionType?: 'RECOMMEND' | 'ADVERTISE', activated?: boolean, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PlacementApiFp(this.configuration).placementControllerFetchMany(orderBy, select, title, startDate, endDate, type, suggestionType, activated, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacementApi
     */
    public placementControllerFetchOne(id: string, options?: AxiosRequestConfig) {
        return PlacementApiFp(this.configuration).placementControllerFetchOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacementApi
     */
    public placementControllerRemove(id: string, options?: AxiosRequestConfig) {
        return PlacementApiFp(this.configuration).placementControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacementApi
     */
    public placementControllerRemoveProduct(id: string, productId: string, options?: AxiosRequestConfig) {
        return PlacementApiFp(this.configuration).placementControllerRemoveProduct(id, productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdatePlacementDto} updatePlacementDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacementApi
     */
    public placementControllerUpdate(id: string, updatePlacementDto: UpdatePlacementDto, options?: AxiosRequestConfig) {
        return PlacementApiFp(this.configuration).placementControllerUpdate(id, updatePlacementDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerCreate: async (createProductDto: CreateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductDto' is not null or undefined
            assertParamExists('productControllerCreate', 'createProductDto', createProductDto)
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch many products.
         * @summary 
         * @param {Array<string>} [orderBy] ProductSortOption
         * @param {string} [sellerId] 
         * @param {string} [storeId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [placementId] 
         * @param {string} [categoryId] 
         * @param {boolean} [activated] 
         * @param {string} [name] 
         * @param {string} [idOnStore] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFetchMany: async (orderBy?: Array<string>, sellerId?: string, storeId?: string, startDate?: string, endDate?: string, placementId?: string, categoryId?: string, activated?: boolean, name?: string, idOnStore?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)

            if (orderBy) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['sellerId'] = sellerId;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (placementId !== undefined) {
                localVarQueryParameter['placementId'] = placementId;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (activated !== undefined) {
                localVarQueryParameter['activated'] = activated;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (idOnStore !== undefined) {
                localVarQueryParameter['idOnStore'] = idOnStore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch one product.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFetchOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productControllerFetchOne', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProductDto} updateProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerUpdate: async (id: string, updateProductDto: UpdateProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productControllerUpdate', 'id', id)
            // verify required parameter 'updateProductDto' is not null or undefined
            assertParamExists('productControllerUpdate', 'updateProductDto', updateProductDto)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk upsert products.
         * @summary 
         * @param {UpsertManyProductDto} upsertManyProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerUpsertMany: async (upsertManyProductDto: UpsertManyProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertManyProductDto' is not null or undefined
            assertParamExists('productControllerUpsertMany', 'upsertManyProductDto', upsertManyProductDto)
            const localVarPath = `/products/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api-key required
            await setApiKeyToObject(localVarHeaderParameter, "X-Api-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertManyProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerCreate(createProductDto: CreateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerCreate(createProductDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch many products.
         * @summary 
         * @param {Array<string>} [orderBy] ProductSortOption
         * @param {string} [sellerId] 
         * @param {string} [storeId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [placementId] 
         * @param {string} [categoryId] 
         * @param {boolean} [activated] 
         * @param {string} [name] 
         * @param {string} [idOnStore] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerFetchMany(orderBy?: Array<string>, sellerId?: string, storeId?: string, startDate?: string, endDate?: string, placementId?: string, categoryId?: string, activated?: boolean, name?: string, idOnStore?: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductControllerFetchMany200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerFetchMany(orderBy, sellerId, storeId, startDate, endDate, placementId, categoryId, activated, name, idOnStore, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch one product.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerFetchOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FetchProductResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerFetchOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProductDto} updateProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerUpdate(id: string, updateProductDto: UpdateProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerUpdate(id, updateProductDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Bulk upsert products.
         * @summary 
         * @param {UpsertManyProductDto} upsertManyProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productControllerUpsertMany(upsertManyProductDto: UpsertManyProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpsertManyProductResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productControllerUpsertMany(upsertManyProductDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerCreate(createProductDto: CreateProductDto, options?: any): AxiosPromise<Product> {
            return localVarFp.productControllerCreate(createProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch many products.
         * @summary 
         * @param {Array<string>} [orderBy] ProductSortOption
         * @param {string} [sellerId] 
         * @param {string} [storeId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [placementId] 
         * @param {string} [categoryId] 
         * @param {boolean} [activated] 
         * @param {string} [name] 
         * @param {string} [idOnStore] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFetchMany(orderBy?: Array<string>, sellerId?: string, storeId?: string, startDate?: string, endDate?: string, placementId?: string, categoryId?: string, activated?: boolean, name?: string, idOnStore?: string, limit?: number, offset?: number, options?: any): AxiosPromise<ProductControllerFetchMany200Response> {
            return localVarFp.productControllerFetchMany(orderBy, sellerId, storeId, startDate, endDate, placementId, categoryId, activated, name, idOnStore, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch one product.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerFetchOne(id: string, options?: any): AxiosPromise<FetchProductResponseDto> {
            return localVarFp.productControllerFetchOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateProductDto} updateProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerUpdate(id: string, updateProductDto: UpdateProductDto, options?: any): AxiosPromise<void> {
            return localVarFp.productControllerUpdate(id, updateProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk upsert products.
         * @summary 
         * @param {UpsertManyProductDto} upsertManyProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productControllerUpsertMany(upsertManyProductDto: UpsertManyProductDto, options?: any): AxiosPromise<UpsertManyProductResponseDto> {
            return localVarFp.productControllerUpsertMany(upsertManyProductDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {CreateProductDto} createProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerCreate(createProductDto: CreateProductDto, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerCreate(createProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch many products.
     * @summary 
     * @param {Array<string>} [orderBy] ProductSortOption
     * @param {string} [sellerId] 
     * @param {string} [storeId] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {string} [placementId] 
     * @param {string} [categoryId] 
     * @param {boolean} [activated] 
     * @param {string} [name] 
     * @param {string} [idOnStore] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerFetchMany(orderBy?: Array<string>, sellerId?: string, storeId?: string, startDate?: string, endDate?: string, placementId?: string, categoryId?: string, activated?: boolean, name?: string, idOnStore?: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerFetchMany(orderBy, sellerId, storeId, startDate, endDate, placementId, categoryId, activated, name, idOnStore, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch one product.
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerFetchOne(id: string, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerFetchOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateProductDto} updateProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerUpdate(id: string, updateProductDto: UpdateProductDto, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerUpdate(id, updateProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk upsert products.
     * @summary 
     * @param {UpsertManyProductDto} upsertManyProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productControllerUpsertMany(upsertManyProductDto: UpsertManyProductDto, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productControllerUpsertMany(upsertManyProductDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SuggestionApi - axios parameter creator
 * @export
 */
export const SuggestionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch a personalized banner for advertisement.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisementsControllerAdvertiseBanners: async (bannerSuggestionRequestDto: BannerSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bannerSuggestionRequestDto' is not null or undefined
            assertParamExists('advertisementsControllerAdvertiseBanners', 'bannerSuggestionRequestDto', bannerSuggestionRequestDto)
            const localVarPath = `/v1/advertisements/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bannerSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized product for advertisement.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisementsControllerAdvertiseProducts: async (productSuggestionRequestDto: ProductSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSuggestionRequestDto' is not null or undefined
            assertParamExists('advertisementsControllerAdvertiseProducts', 'productSuggestionRequestDto', productSuggestionRequestDto)
            const localVarPath = `/v1/advertisements/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized banner for recommendation.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationsControllerRecommendBanners: async (bannerSuggestionRequestDto: BannerSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bannerSuggestionRequestDto' is not null or undefined
            assertParamExists('recommendationsControllerRecommendBanners', 'bannerSuggestionRequestDto', bannerSuggestionRequestDto)
            const localVarPath = `/v1/recommendations/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bannerSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized product for recommendation.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationsControllerRecommendProducts: async (productSuggestionRequestDto: ProductSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSuggestionRequestDto' is not null or undefined
            assertParamExists('recommendationsControllerRecommendProducts', 'productSuggestionRequestDto', productSuggestionRequestDto)
            const localVarPath = `/v1/recommendations/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized banner for advertisement.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerAdvertiseBanners: async (bannerSuggestionRequestDto: BannerSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bannerSuggestionRequestDto' is not null or undefined
            assertParamExists('suggestionControllerAdvertiseBanners', 'bannerSuggestionRequestDto', bannerSuggestionRequestDto)
            const localVarPath = `/advertisements/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bannerSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized product for advertisement.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerAdvertiseProducts: async (productSuggestionRequestDto: ProductSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSuggestionRequestDto' is not null or undefined
            assertParamExists('suggestionControllerAdvertiseProducts', 'productSuggestionRequestDto', productSuggestionRequestDto)
            const localVarPath = `/advertisements/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized banner for recommendation.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerRecommendBanners: async (bannerSuggestionRequestDto: BannerSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bannerSuggestionRequestDto' is not null or undefined
            assertParamExists('suggestionControllerRecommendBanners', 'bannerSuggestionRequestDto', bannerSuggestionRequestDto)
            const localVarPath = `/recommendations/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bannerSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized product for recommendation.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerRecommendProducts: async (productSuggestionRequestDto: ProductSuggestionRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSuggestionRequestDto' is not null or undefined
            assertParamExists('suggestionControllerRecommendProducts', 'productSuggestionRequestDto', productSuggestionRequestDto)
            const localVarPath = `/recommendations/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productSuggestionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuggestionApi - functional programming interface
 * @export
 */
export const SuggestionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuggestionApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch a personalized banner for advertisement.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advertisementsControllerAdvertiseBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BannerSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advertisementsControllerAdvertiseBanners(bannerSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a personalized product for advertisement.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async advertisementsControllerAdvertiseProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.advertisementsControllerAdvertiseProducts(productSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a personalized banner for recommendation.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendationsControllerRecommendBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BannerSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recommendationsControllerRecommendBanners(bannerSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a personalized product for recommendation.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendationsControllerRecommendProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recommendationsControllerRecommendProducts(productSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a personalized banner for advertisement.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suggestionControllerAdvertiseBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BannerSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suggestionControllerAdvertiseBanners(bannerSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a personalized product for advertisement.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suggestionControllerAdvertiseProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suggestionControllerAdvertiseProducts(productSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a personalized banner for recommendation.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suggestionControllerRecommendBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BannerSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suggestionControllerRecommendBanners(bannerSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a personalized product for recommendation.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suggestionControllerRecommendProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSuggestionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suggestionControllerRecommendProducts(productSuggestionRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SuggestionApi - factory interface
 * @export
 */
export const SuggestionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuggestionApiFp(configuration)
    return {
        /**
         * Fetch a personalized banner for advertisement.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisementsControllerAdvertiseBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: any): AxiosPromise<BannerSuggestionResponseDto> {
            return localVarFp.advertisementsControllerAdvertiseBanners(bannerSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized product for advertisement.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        advertisementsControllerAdvertiseProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: any): AxiosPromise<ProductSuggestionResponseDto> {
            return localVarFp.advertisementsControllerAdvertiseProducts(productSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized banner for recommendation.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationsControllerRecommendBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: any): AxiosPromise<BannerSuggestionResponseDto> {
            return localVarFp.recommendationsControllerRecommendBanners(bannerSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized product for recommendation.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationsControllerRecommendProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: any): AxiosPromise<ProductSuggestionResponseDto> {
            return localVarFp.recommendationsControllerRecommendProducts(productSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized banner for advertisement.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerAdvertiseBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: any): AxiosPromise<BannerSuggestionResponseDto> {
            return localVarFp.suggestionControllerAdvertiseBanners(bannerSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized product for advertisement.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerAdvertiseProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: any): AxiosPromise<ProductSuggestionResponseDto> {
            return localVarFp.suggestionControllerAdvertiseProducts(productSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized banner for recommendation.
         * @summary 
         * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerRecommendBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: any): AxiosPromise<BannerSuggestionResponseDto> {
            return localVarFp.suggestionControllerRecommendBanners(bannerSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized product for recommendation.
         * @summary 
         * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestionControllerRecommendProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: any): AxiosPromise<ProductSuggestionResponseDto> {
            return localVarFp.suggestionControllerRecommendProducts(productSuggestionRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SuggestionApi - object-oriented interface
 * @export
 * @class SuggestionApi
 * @extends {BaseAPI}
 */
export class SuggestionApi extends BaseAPI {
    /**
     * Fetch a personalized banner for advertisement.
     * @summary 
     * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public advertisementsControllerAdvertiseBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).advertisementsControllerAdvertiseBanners(bannerSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized product for advertisement.
     * @summary 
     * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public advertisementsControllerAdvertiseProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).advertisementsControllerAdvertiseProducts(productSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized banner for recommendation.
     * @summary 
     * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public recommendationsControllerRecommendBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).recommendationsControllerRecommendBanners(bannerSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized product for recommendation.
     * @summary 
     * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public recommendationsControllerRecommendProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).recommendationsControllerRecommendProducts(productSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized banner for advertisement.
     * @summary 
     * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public suggestionControllerAdvertiseBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).suggestionControllerAdvertiseBanners(bannerSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized product for advertisement.
     * @summary 
     * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public suggestionControllerAdvertiseProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).suggestionControllerAdvertiseProducts(productSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized banner for recommendation.
     * @summary 
     * @param {BannerSuggestionRequestDto} bannerSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public suggestionControllerRecommendBanners(bannerSuggestionRequestDto: BannerSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).suggestionControllerRecommendBanners(bannerSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a personalized product for recommendation.
     * @summary 
     * @param {ProductSuggestionRequestDto} productSuggestionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestionApi
     */
    public suggestionControllerRecommendProducts(productSuggestionRequestDto: ProductSuggestionRequestDto, options?: AxiosRequestConfig) {
        return SuggestionApiFp(this.configuration).suggestionControllerRecommendProducts(productSuggestionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


